{"version":3,"sources":["../../src/runtime/standalone.ts"],"names":["TestLoader","Logger","treeFromFilterResults","encodeSelectively","optionEnabled","TestWorker","window","onbeforeunload","haveSomeResults","undefined","log","runnow","debug","worker","resultsVis","document","getElementById","resultsJSON","makeTreeNodeHTML","name","tree","children","makeSubtreeHTML","makeCaseHTML","runCase","t","div","$","addClass","runSubtree","res","run","injectResult","casetime","text","timems","toFixed","attr","status","logs","caselogs","empty","l","caselog","appendTo","on","console","toJSON","casehead","makeTreeNodeHeaderHTML","append","html","subtree","header","description","subtreeHTML","makeSubtreeChildrenHTML","runSubtreeFns","push","nameEncoded","nameHTML","i","indexOf","n1","slice","n2","replace","href","updateJSON","nodetitle","textContent","asJSON","loader","files","loadTestsFromQuery","location","search"],"mappings":"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","sourcesContent":["// Implements the standalone test runner (see also: index.html).\n\nimport { RunCase } from '../framework/index.js';\nimport { TestLoader } from '../framework/loader.js';\nimport { LiveTestCaseResult, Logger } from '../framework/logger.js';\nimport { FilterResultTreeNode, treeFromFilterResults } from '../framework/tree.js';\nimport { encodeSelectively } from '../framework/url_query.js';\n\nimport { optionEnabled } from './helper/options.js';\nimport { TestWorker } from './helper/test_worker.js';\n\nwindow.onbeforeunload = () => {\n  // Prompt user before reloading if there are any results\n  return haveSomeResults ? false : undefined;\n};\n\nlet haveSomeResults = false;\nconst log = new Logger();\n\nconst runnow = optionEnabled('runnow');\nconst debug = optionEnabled('debug');\n\nconst worker = optionEnabled('worker') ? new TestWorker() : undefined;\n\nconst resultsVis = document.getElementById('resultsVis')!;\nconst resultsJSON = document.getElementById('resultsJSON')!;\n\ntype RunSubtree = () => Promise<void>;\n\n// DOM generation\n\nfunction makeTreeNodeHTML(name: string, tree: FilterResultTreeNode): [HTMLElement, RunSubtree] {\n  if (tree.children) {\n    return makeSubtreeHTML(name, tree);\n  } else {\n    return makeCaseHTML(name, tree.runCase!);\n  }\n}\n\nfunction makeCaseHTML(name: string, t: RunCase): [HTMLElement, RunSubtree] {\n  const div = $('<div>').addClass('testcase');\n\n  const runSubtree = async () => {\n    haveSomeResults = true;\n    let res: LiveTestCaseResult;\n    if (worker) {\n      res = await worker.run(name, debug);\n      t.injectResult(res);\n    } else {\n      res = await t.run(debug);\n    }\n\n    casetime.text(res.timems.toFixed(4) + ' ms');\n\n    div.attr('data-status', res.status);\n\n    if (res.logs) {\n      caselogs.empty();\n      for (const l of res.logs) {\n        const caselog = $('<div>')\n          .addClass('testcaselog')\n          .appendTo(caselogs);\n        $('<button>')\n          .addClass('testcaselogbtn')\n          .attr('alt', 'Log stack to console')\n          .attr('title', 'Log stack to console')\n          .appendTo(caselog)\n          .on('click', () => {\n            // tslint:disable-next-line: no-console\n            console.log(l);\n          });\n        $('<pre>')\n          .addClass('testcaselogtext')\n          .appendTo(caselog)\n          .text(l.toJSON());\n      }\n    }\n  };\n\n  const casehead = makeTreeNodeHeaderHTML(name, undefined, runSubtree);\n  div.append(casehead);\n  const casetime = $('<div>')\n    .addClass('testcasetime')\n    .html('ms')\n    .appendTo(casehead);\n  const caselogs = $('<div>')\n    .addClass('testcaselogs')\n    .appendTo(div);\n\n  return [div[0], runSubtree];\n}\n\nfunction makeSubtreeHTML(name: string, subtree: FilterResultTreeNode): [HTMLElement, RunSubtree] {\n  const div = $('<div>').addClass('subtree');\n\n  const header = makeTreeNodeHeaderHTML(name, subtree.description, () => {\n    return runSubtree();\n  });\n  div.append(header);\n\n  const subtreeHTML = $('<div>')\n    .addClass('subtreechildren')\n    .appendTo(div);\n  const runSubtree = makeSubtreeChildrenHTML(subtreeHTML[0], subtree.children!);\n\n  return [div[0], runSubtree];\n}\n\nfunction makeSubtreeChildrenHTML(\n  div: HTMLElement,\n  children: Map<string, FilterResultTreeNode>\n): RunSubtree {\n  const runSubtreeFns: RunSubtree[] = [];\n  for (const [name, subtree] of children) {\n    const [subtreeHTML, runSubtree] = makeTreeNodeHTML(name, subtree);\n    div.append(subtreeHTML);\n    runSubtreeFns.push(runSubtree);\n  }\n\n  return async () => {\n    for (const runSubtree of runSubtreeFns) {\n      await runSubtree();\n    }\n  };\n}\n\nfunction makeTreeNodeHeaderHTML(\n  name: string,\n  description: string | undefined,\n  runSubtree: RunSubtree\n): HTMLElement {\n  const div = $('<div>').addClass('nodeheader');\n\n  const nameEncoded = encodeSelectively(name);\n  let nameHTML;\n  {\n    const i = nameEncoded.indexOf('{');\n    const n1 = i === -1 ? nameEncoded : nameEncoded.slice(0, i + 1);\n    const n2 = i === -1 ? '' : nameEncoded.slice(i + 1);\n    nameHTML = n1.replace(/:/g, ':<wbr>') + '<wbr>' + n2.replace(/,/g, ',<wbr>');\n  }\n\n  const href = `?${worker ? 'worker&' : ''}${debug ? 'debug&' : ''}q=${nameEncoded}`;\n  $('<button>')\n    .addClass('noderun')\n    .attr('alt', 'Run subtree')\n    .attr('title', 'Run subtree')\n    .on('click', async () => {\n      await runSubtree();\n      updateJSON();\n    })\n    .appendTo(div);\n  $('<a>')\n    .addClass('nodelink')\n    .attr('href', href)\n    .attr('alt', 'Open')\n    .attr('title', 'Open')\n    .appendTo(div);\n  const nodetitle = $('<div>')\n    .addClass('nodetitle')\n    .appendTo(div);\n  $('<span>')\n    .addClass('nodename')\n    .html(nameHTML)\n    .appendTo(nodetitle);\n  if (description) {\n    $('<div>')\n      .addClass('nodedescription')\n      .html(description.replace(/\\n/g, '<br>'))\n      .appendTo(nodetitle);\n  }\n  return div[0];\n}\n\nfunction updateJSON(): void {\n  resultsJSON.textContent = log.asJSON(2);\n}\n\n(async () => {\n  const loader = new TestLoader();\n\n  // TODO: everything after this point is very similar across the three runtimes.\n  // TODO: start populating page before waiting for everything to load?\n  const files = await loader.loadTestsFromQuery(window.location.search);\n  const tree = treeFromFilterResults(log, files);\n\n  const runSubtree = makeSubtreeChildrenHTML(resultsVis, tree.children!);\n\n  if (runnow) {\n    runSubtree();\n  }\n})();\n"],"file":"standalone.js"}