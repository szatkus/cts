{"version":3,"sources":["../../src/runtime/cmdline.ts"],"names":["fs","process","TestLoader","Logger","makeQueryString","usage","rc","console","log","exit","argv","length","existsSync","verbose","filterArgs","a","slice","startsWith","push","loader","files","loadTestsFromCmdLine","failed","warned","running","f","spec","rec","record","id","t","g","iterate","res","run","status","Error","Promise","all","asJSON","printResults","results","r","timems","logs","l","toJSON","replace","total","passed","pct","x","toFixed","rpt","xs","toString","padStart","Math","log10","ex"],"mappings":"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","sourcesContent":["// tslint:disable: no-console\n\nimport * as fs from 'fs';\nimport * as process from 'process';\n\nimport { TestSpecID } from '../framework/id.js';\nimport { TestLoader } from '../framework/loader.js';\nimport { LiveTestCaseResult, Logger } from '../framework/logger.js';\nimport { makeQueryString } from '../framework/url_query.js';\n\nfunction usage(rc: number): never {\n  console.log('Usage:');\n  console.log('  tools/run [QUERIES...]');\n  console.log('  tools/run unittests: cts:buffers/');\n  return process.exit(rc);\n}\n\nif (process.argv.length <= 2) {\n  usage(0);\n}\n\nif (!fs.existsSync('src/runtime/cmdline.ts')) {\n  console.log('Must be run from repository root');\n  usage(1);\n}\n\nlet verbose = false;\nconst filterArgs = [];\nfor (const a of process.argv.slice(2)) {\n  if (a.startsWith('-')) {\n    if (a === '--verbose' || a === '-v') {\n      verbose = true;\n    } else {\n      usage(1);\n    }\n  } else {\n    filterArgs.push(a);\n  }\n}\n\n(async () => {\n  try {\n    const loader = new TestLoader();\n    const files = await loader.loadTestsFromCmdLine(filterArgs);\n\n    const log = new Logger();\n\n    const failed: Array<[TestSpecID, LiveTestCaseResult]> = [];\n    const warned: Array<[TestSpecID, LiveTestCaseResult]> = [];\n\n    // TODO: don't run all tests all at once\n    const running = [];\n    for (const f of files) {\n      if (!('g' in f.spec)) {\n        continue;\n      }\n\n      const [rec] = log.record(f.id);\n      for (const t of f.spec.g.iterate(rec)) {\n        running.push(\n          (async () => {\n            const res = await t.run();\n            if (res.status === 'fail') {\n              failed.push([f.id, res]);\n            }\n            if (res.status === 'warn') {\n              warned.push([f.id, res]);\n            }\n          })()\n        );\n      }\n    }\n\n    if (running.length === 0) {\n      throw new Error('found no tests!');\n    }\n\n    await Promise.all(running);\n\n    // TODO: write results out somewhere (a file?)\n    if (verbose) {\n      console.log(log.asJSON(2));\n    }\n\n    function printResults(results: Array<[TestSpecID, LiveTestCaseResult]>): void {\n      for (const [id, r] of results) {\n        console.log(makeQueryString(id, r), r.status, r.timems + 'ms');\n        if (r.logs) {\n          for (const l of r.logs) {\n            console.log('- ' + l.toJSON().replace(/\\n/g, '\\n  '));\n          }\n        }\n      }\n    }\n\n    if (warned.length) {\n      console.log('');\n      console.log('** Warnings **');\n      printResults(warned);\n    }\n    if (failed.length) {\n      console.log('');\n      console.log('** Failures **');\n      printResults(failed);\n    }\n\n    const total = running.length;\n    const passed = total - warned.length - failed.length;\n    function pct(x: number): string {\n      return ((100 * x) / total).toFixed(2);\n    }\n    function rpt(x: number): string {\n      const xs = x.toString().padStart(1 + Math.log10(total), ' ');\n      return `${xs} / ${total} = ${pct(x).padStart(6, ' ')}%`;\n    }\n    console.log('');\n    console.log(`** Summary **\nPassed  w/o warnings = ${rpt(passed)}\nPassed with warnings = ${rpt(warned.length)}\nFailed               = ${rpt(failed.length)}`);\n\n    if (failed.length || warned.length) {\n      process.exit(1);\n    }\n  } catch (ex) {\n    console.log(ex);\n    process.exit(1);\n  }\n})();\n"],"file":"cmdline.js"}