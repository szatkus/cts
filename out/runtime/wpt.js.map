{"version":3,"sources":["../../src/runtime/wpt.ts"],"names":["TestLoader","Logger","makeQueryString","AsyncMutex","optionEnabled","TestWorker","loader","files","loadTestsFromQuery","window","location","search","worker","undefined","log","mutex","running","f","spec","rec","record","id","t","g","iterate","name","async_test","p","with","r","run","injectResult","step","status","logs","map","s","toJSON","join","done","push","Promise","all","resultsElem","document","getElementById","textContent","asJSON"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAA6BC,MAA7B,QAA2C,wBAA3C;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,UAAT,QAA2B,kCAA3B;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAUA,CAAC,YAAY;AACX,QAAMC,MAAM,GAAG,IAAIN,UAAJ,EAAf;AACA,QAAMO,KAAK,GAAG,MAAMD,MAAM,CAACE,kBAAP,CAA0BC,MAAM,CAACC,QAAP,CAAgBC,MAA1C,CAApB;AAEA,QAAMC,MAAM,GAAGR,aAAa,CAAC,QAAD,CAAb,GAA0B,IAAIC,UAAJ,EAA1B,GAA6CQ,SAA5D;AAEA,QAAMC,GAAG,GAAG,IAAIb,MAAJ,EAAZ;AACA,QAAMc,KAAK,GAAG,IAAIZ,UAAJ,EAAd;AACA,QAAMa,OAA6B,GAAG,EAAtC;;AAEA,OAAK,MAAMC,CAAX,IAAgBV,KAAhB,EAAuB;AACrB,QAAI,EAAE,OAAOU,CAAC,CAACC,IAAX,CAAJ,EAAsB;AACpB;AACD;;AAED,UAAM,CAACC,GAAD,IAAQL,GAAG,CAACM,MAAJ,CAAWH,CAAC,CAACI,EAAb,CAAd;;AACA,SAAK,MAAMC,CAAX,IAAgBL,CAAC,CAACC,IAAF,CAAOK,CAAP,CAASC,OAAT,CAAiBL,GAAjB,CAAhB,EAAuC;AACrC,YAAMM,IAAI,GAAGvB,eAAe,CAACe,CAAC,CAACI,EAAH,EAAOC,CAAC,CAACD,EAAT,CAA5B,CADqC,CAGrC;;AACAK,MAAAA,UAAU,CAAC,YAA6C;AACtD,cAAMC,CAAC,GAAGZ,KAAK,CAACa,IAAN,CAAW,YAAY;AAC/B,cAAIC,CAAJ;;AACA,cAAIjB,MAAJ,EAAY;AACViB,YAAAA,CAAC,GAAG,MAAMjB,MAAM,CAACkB,GAAP,CAAWL,IAAX,CAAV;AACAH,YAAAA,CAAC,CAACS,YAAF,CAAeF,CAAf;AACD,WAHD,MAGO;AACLA,YAAAA,CAAC,GAAG,MAAMP,CAAC,CAACQ,GAAF,EAAV;AACD;;AAED,eAAKE,IAAL,CAAU,MAAM;AACd;AACA,gBAAIH,CAAC,CAACI,MAAF,KAAa,MAAjB,EAAyB;AACvB,oBAAM,CAACJ,CAAC,CAACK,IAAF,IAAU,EAAX,EAAeC,GAAf,CAAmBC,CAAC,IAAIA,CAAC,CAACC,MAAF,EAAxB,EAAoCC,IAApC,CAAyC,MAAzC,CAAN;AACD;AACF,WALD;AAMA,eAAKC,IAAL;AACD,SAhBS,CAAV;AAkBAvB,QAAAA,OAAO,CAACwB,IAAR,CAAab,CAAb;AACA,eAAOA,CAAP;AACD,OArBS,EAqBPF,IArBO,CAAV;AAsBD;AACF;;AAED,QAAMgB,OAAO,CAACC,GAAR,CAAY1B,OAAZ,CAAN;AACA,QAAM2B,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAApB;AACAF,EAAAA,WAAW,CAACG,WAAZ,GAA0BhC,GAAG,CAACiC,MAAJ,CAAW,CAAX,CAA1B;AACD,CAhDD","sourcesContent":["import { TestLoader } from '../framework/loader.js';\nimport { LiveTestCaseResult, Logger } from '../framework/logger.js';\nimport { makeQueryString } from '../framework/url_query.js';\nimport { AsyncMutex } from '../framework/util/async_mutex.js';\n\nimport { optionEnabled } from './helper/options.js';\nimport { TestWorker } from './helper/test_worker.js';\n\ndeclare interface WptTestObject {\n  step(f: () => void): void;\n  done(): void;\n}\n// Implements the wpt-embedded test runner (see also: wpt/cts.html).\n\ndeclare function async_test(f: (this: WptTestObject) => Promise<void>, name: string): void;\n\n(async () => {\n  const loader = new TestLoader();\n  const files = await loader.loadTestsFromQuery(window.location.search);\n\n  const worker = optionEnabled('worker') ? new TestWorker() : undefined;\n\n  const log = new Logger();\n  const mutex = new AsyncMutex();\n  const running: Array<Promise<void>> = [];\n\n  for (const f of files) {\n    if (!('g' in f.spec)) {\n      continue;\n    }\n\n    const [rec] = log.record(f.id);\n    for (const t of f.spec.g.iterate(rec)) {\n      const name = makeQueryString(f.id, t.id);\n\n      // Note: apparently, async_tests must ALL be added within the same task.\n      async_test(function(this: WptTestObject): Promise<void> {\n        const p = mutex.with(async () => {\n          let r: LiveTestCaseResult;\n          if (worker) {\n            r = await worker.run(name);\n            t.injectResult(r);\n          } else {\n            r = await t.run();\n          }\n\n          this.step(() => {\n            // Unfortunately, it seems not possible to surface any logs for warn/skip.\n            if (r.status === 'fail') {\n              throw (r.logs || []).map(s => s.toJSON()).join('\\n\\n');\n            }\n          });\n          this.done();\n        });\n\n        running.push(p);\n        return p;\n      }, name);\n    }\n  }\n\n  await Promise.all(running);\n  const resultsElem = document.getElementById('results') as HTMLElement;\n  resultsElem.textContent = log.asJSON(2);\n})();\n"],"file":"wpt.js"}