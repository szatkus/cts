{"version":3,"sources":["../../../src/suites/unittests/test_group.spec.ts"],"names":["description","TestGroup","poptions","TestGroupTest","UnitTest","g","test","t0","seen","count","t","params","a","run","expect","Counter","doNestedThrow1","Error","doNestedThrow2","fail","res","search","logs","cases","undefined","l","toJSON","st","split","length","shouldThrow","_b","badChars","Array","from","char","result","status","TypeError","shouldReject"],"mappings":"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","sourcesContent":["export const description = `\nUnit tests for TestGroup.\n`;\n\nimport { Fixture, TestGroup, poptions } from '../../framework/index.js';\n\nimport { TestGroupTest } from './test_group_test.js';\nimport { UnitTest } from './unit_test.js';\n\nexport const g = new TestGroup(TestGroupTest);\n\ng.test('UnitTest fixture', async t0 => {\n  let seen = 0;\n  function count(t: Fixture): void {\n    seen++;\n  }\n\n  const g = new TestGroup(UnitTest);\n\n  g.test('test', count);\n  g.test('testp', count).params([{ a: 1 }]);\n\n  await t0.run(g);\n  t0.expect(seen === 2);\n});\n\ng.test('custom fixture', async t0 => {\n  let seen = 0;\n  class Counter extends UnitTest {\n    count(): void {\n      seen++;\n    }\n  }\n\n  const g = new TestGroup(Counter);\n\n  g.test('test', t => {\n    t.count();\n  });\n  g.test('testp', t => {\n    t.count();\n  }).params([{ a: 1 }]);\n\n  await t0.run(g);\n  t0.expect(seen === 2);\n});\n\ng.test('stack', async t0 => {\n  const g = new TestGroup(UnitTest);\n\n  const doNestedThrow1 = () => {\n    throw new Error('goodbye');\n  };\n\n  const doNestedThrow2 = () => doNestedThrow1();\n\n  g.test('fail', t => {\n    t.fail();\n  });\n  g.test('throw', t => {\n    throw new Error('hello');\n  });\n  g.test('throw nested', t => {\n    doNestedThrow2();\n  });\n\n  const res = await t0.run(g);\n\n  const search = /unittests[\\/\\\\]test_group\\.spec\\.[tj]s|suites[\\/\\\\]unittests[\\/\\\\]unit_test\\.[tj]s/;\n  for (const { logs } of res.cases) {\n    if (logs === undefined) {\n      throw new Error('expected logs');\n    }\n    const l = logs[0].toJSON();\n    t0.expect(search.test(l));\n    const st = l.split('\\n');\n    t0.expect(search.test(st[st.length - 1]));\n  }\n});\n\ng.test('duplicate test name', t => {\n  const g = new TestGroup(UnitTest);\n  g.test('abc', () => {});\n\n  t.shouldThrow('Error', () => {\n    g.test('abc', () => {});\n  });\n});\n\ng.test('duplicate test params', t => {\n  const g = new TestGroup(UnitTest);\n\n  t.shouldThrow('Error', () => {\n    g.test('abc', () => {\n      //\n    }).params([\n      { a: 1 }, //\n      { a: 1 },\n    ]);\n  });\n});\n\ng.test('duplicate test params/with different private params', t => {\n  const g = new TestGroup(UnitTest);\n\n  t.shouldThrow('Error', () => {\n    g.test('abc', () => {\n      //\n    }).params([\n      { a: 1, _b: 1 }, //\n      { a: 1, _b: 2 },\n    ]);\n  });\n});\n\nconst badChars = Array.from('\"`~@#$+=\\\\|!^&*[]<>{}-\\'.,');\ng.test('invalid test name', t => {\n  const g = new TestGroup(UnitTest);\n\n  t.shouldThrow('Error', () => {\n    g.test('a' + t.params.char + 'b', () => {});\n  });\n}).params(poptions('char', badChars));\n\ng.test('throws', async t0 => {\n  const g = new TestGroup(UnitTest);\n\n  g.test('a', t => {\n    throw new Error();\n  });\n\n  const result = await t0.run(g);\n  t0.expect(result.cases[0].status === 'fail');\n});\n\ng.test('shouldThrow', async t0 => {\n  t0.shouldThrow('TypeError', () => {\n    throw new TypeError();\n  });\n\n  const g = new TestGroup(UnitTest);\n\n  g.test('a', t => {\n    t.shouldThrow('Error', () => {\n      throw new TypeError();\n    });\n  });\n\n  const result = await t0.run(g);\n  t0.expect(result.cases[0].status === 'fail');\n});\n\ng.test('shouldReject', async t0 => {\n  t0.shouldReject(\n    'TypeError',\n    (async () => {\n      throw new TypeError();\n    })()\n  );\n\n  const g = new TestGroup(UnitTest);\n\n  g.test('a', async t => {\n    t.shouldReject(\n      'Error',\n      (async () => {\n        throw new TypeError();\n      })()\n    );\n  });\n\n  const result = await t0.run(g);\n  // Fails even though shouldReject doesn't fail until after the test function ends\n  t0.expect(result.cases[0].status === 'fail');\n});\n"],"file":"test_group.spec.js"}