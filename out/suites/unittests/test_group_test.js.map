{"version":3,"sources":["../../../src/suites/unittests/test_group_test.ts"],"names":["paramsEquals","Logger","UnitTest","TestGroupTest","run","g","rec","res","record","suite","path","Promise","all","Array","from","iterate","map","test","enumerate","cases","push","id","expectCases","gcases","expect","length","i","params"],"mappings":";;;;AACA,SAA6BA,YAA7B,QAAiD,0BAAjD;AACA,SAA6BC,MAA7B,QAA2C,2BAA3C;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAO,MAAMC,aAAN,SAA4BD,QAA5B,CAAqC;AAC1C,QAAME,GAAN,CAA6BC,CAA7B,EAA2E;AACzE,UAAM,CAACC,GAAD,EAAMC,GAAN,IAAa,IAAIN,MAAJ,GAAaO,MAAb,CAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAApB,CAAnB;AACA,UAAMC,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAWT,CAAC,CAACU,OAAF,CAAUT,GAAV,CAAX,EAA2BU,GAA3B,CAA+BC,IAAI,IAAIA,IAAI,CAACb,GAAL,EAAvC,CAAZ,CAAN;AACA,WAAOG,GAAP;AACD;;AAEDW,EAAAA,SAAS,CAAoBb,CAApB,EAAmD;AAC1D,UAAMc,KAAK,GAAG,EAAd;AACA,UAAM,CAACb,GAAD,IAAQ,IAAIL,MAAJ,GAAaO,MAAb,CAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAApB,CAAd;;AACA,SAAK,MAAMO,IAAX,IAAmBZ,CAAC,CAACU,OAAF,CAAUT,GAAV,CAAnB,EAAmC;AACjCa,MAAAA,KAAK,CAACC,IAAN,CAAWH,IAAI,CAACI,EAAhB;AACD;;AACD,WAAOF,KAAP;AACD;;AAEDG,EAAAA,WAAW,CAAoBjB,CAApB,EAAqCc,KAArC,EAAgE;AACzE,UAAMI,MAAM,GAAG,KAAKL,SAAL,CAAeb,CAAf,CAAf;;AAEA,QAAI,KAAKmB,MAAL,CAAYD,MAAM,CAACE,MAAP,KAAkBN,KAAK,CAACM,MAApC,CAAJ,EAAiD;AAC/C,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACM,MAA1B,EAAkC,EAAEC,CAApC,EAAuC;AACrC,aAAKF,MAAL,CAAYD,MAAM,CAACG,CAAD,CAAN,CAAUT,IAAV,KAAmBE,KAAK,CAACO,CAAD,CAAL,CAAST,IAAxC;AACA,aAAKO,MAAL,CAAYxB,YAAY,CAACuB,MAAM,CAACG,CAAD,CAAN,CAAUC,MAAX,EAAmBR,KAAK,CAACO,CAAD,CAAL,CAASC,MAA5B,CAAxB;AACD;AACF;AACF;;AAzByC","sourcesContent":["import { TestCaseID } from '../../framework/id.js';\nimport { Fixture, TestGroup, paramsEquals } from '../../framework/index.js';\nimport { LiveTestSpecResult, Logger } from '../../framework/logger.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport class TestGroupTest extends UnitTest {\n  async run<F extends Fixture>(g: TestGroup<F>): Promise<LiveTestSpecResult> {\n    const [rec, res] = new Logger().record({ suite: '', path: '' });\n    await Promise.all(Array.from(g.iterate(rec)).map(test => test.run()));\n    return res;\n  }\n\n  enumerate<F extends Fixture>(g: TestGroup<F>): TestCaseID[] {\n    const cases = [];\n    const [rec] = new Logger().record({ suite: '', path: '' });\n    for (const test of g.iterate(rec)) {\n      cases.push(test.id);\n    }\n    return cases;\n  }\n\n  expectCases<F extends Fixture>(g: TestGroup<F>, cases: TestCaseID[]): void {\n    const gcases = this.enumerate(g);\n\n    if (this.expect(gcases.length === cases.length)) {\n      for (let i = 0; i < cases.length; ++i) {\n        this.expect(gcases[i].test === cases[i].test);\n        this.expect(paramsEquals(gcases[i].params, cases[i].params));\n      }\n    }\n  }\n}\n"],"file":"test_group_test.js"}