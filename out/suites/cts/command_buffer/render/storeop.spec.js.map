{"version":3,"sources":["../../../../../src/suites/cts/command_buffer/render/storeop.spec.ts"],"names":["description","TestGroup","GPUTest","g","test","t","renderTexture","device","createTexture","size","width","height","depth","format","usage","GPUTextureUsage","COPY_SRC","OUTPUT_ATTACHMENT","vertexModule","createShaderModule","code","fragmentModule","renderPipeline","createRenderPipeline","vertexStage","module","entryPoint","fragmentStage","layout","createPipelineLayout","bindGroupLayouts","primitiveTopology","colorStates","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","attachment","createView","storeOp","params","loadValue","r","b","a","setPipeline","draw","endPass","dstBuffer","createBuffer","GPUBufferUsage","COPY_DST","copyTextureToBuffer","texture","buffer","rowPitch","imageHeight","defaultQueue","submit","finish","expectedContent","Uint32Array","_expected","expectContents"],"mappings":"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","sourcesContent":["export const description = `\nrenderPass store op test that drawn quad is either stored or cleared based on storeop`;\n\nimport { TestGroup } from '../../../../framework/index.js';\nimport GLSL from '../../../../tools/glsl.macro.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = new TestGroup(GPUTest);\n\ng.test('storeOp controls whether 1x1 drawn quad is stored', async t => {\n  const renderTexture = t.device.createTexture({\n    size: { width: 1, height: 1, depth: 1 },\n    format: 'r8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n  });\n\n  // create render pipeline\n  const vertexModule = t.createShaderModule({\n    code: GLSL(\n      'vertex',\n      `#version 450\n      const vec2 pos[3] = vec2[3](\n                              vec2( 1.0f, -1.0f),\n                              vec2( 1.0f,  1.0f),\n                              vec2(-1.0f,  1.0f)\n                              );\n\n      void main() {\n          gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\n      }`\n    ),\n  });\n  const fragmentModule = t.createShaderModule({\n    code: GLSL(\n      'fragment',\n      `#version 450\n      layout(location = 0) out vec4 fragColor;\n      void main() {\n          fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n      }`\n    ),\n  });\n  const renderPipeline = t.device.createRenderPipeline({\n    vertexStage: { module: vertexModule, entryPoint: 'main' },\n    fragmentStage: { module: fragmentModule, entryPoint: 'main' },\n    layout: t.device.createPipelineLayout({ bindGroupLayouts: [] }),\n    primitiveTopology: 'triangle-list',\n    colorStates: [{ format: 'r8unorm' }],\n  });\n\n  // encode pass and submit\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        attachment: renderTexture.createView(),\n        storeOp: t.params.storeOp,\n        loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n      },\n    ],\n  });\n  pass.setPipeline(renderPipeline);\n  pass.draw(3, 1, 0, 0);\n  pass.endPass();\n  const dstBuffer = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\n  });\n  encoder.copyTextureToBuffer(\n    { texture: renderTexture },\n    { buffer: dstBuffer, rowPitch: 256, imageHeight: 1 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  // expect the buffer to be clear\n  const expectedContent = new Uint32Array([t.params._expected]);\n  t.expectContents(dstBuffer, expectedContent);\n}).params([\n  { storeOp: 'store', _expected: 255 }, //\n  { storeOp: 'clear', _expected: 0 },\n]);\n"],"file":"storeop.spec.js"}