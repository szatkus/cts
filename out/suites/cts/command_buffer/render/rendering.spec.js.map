{"version":3,"sources":["../../../../../src/suites/cts/command_buffer/render/rendering.spec.ts"],"names":["description","TestGroup","GPUTest","g","test","t","dst","device","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","colorAttachment","createTexture","format","width","height","depth","GPUTextureUsage","OUTPUT_ATTACHMENT","colorAttachmentView","createView","vertexModule","createShaderModule","code","fragmentModule","pl","createPipelineLayout","bindGroupLayouts","pipeline","createRenderPipeline","vertexStage","module","entryPoint","fragmentStage","layout","primitiveTopology","rasterizationState","frontFace","colorStates","alphaBlend","colorBlend","vertexState","indexFormat","vertexBuffers","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","attachment","storeOp","loadValue","r","b","a","setPipeline","draw","endPass","copyTextureToBuffer","texture","mipLevel","origin","x","y","z","buffer","rowPitch","imageHeight","defaultQueue","submit","finish","expectContents","Uint8Array"],"mappings":"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","sourcesContent":["export const description = ``;\n\nimport { TestGroup } from '../../../../framework/index.js';\nimport GLSL from '../../../../tools/glsl.macro.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = new TestGroup(GPUTest);\n\ng.test('fullscreen quad', async t => {\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.device.createTexture({\n    format: 'rgba8unorm',\n    size: { width: 1, height: 1, depth: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n  });\n  const colorAttachmentView = colorAttachment.createView();\n\n  const vertexModule = t.createShaderModule({\n    code: GLSL(\n      'vertex',\n      `#version 310 es\n        void main() {\n          const vec2 pos[3] = vec2[3](\n              vec2(-1.f, -3.f), vec2(3.f, 1.f), vec2(-1.f, 1.f));\n          gl_Position = vec4(pos[gl_VertexIndex], 0.f, 1.f);\n        }\n      `\n    ),\n  });\n  const fragmentModule = t.createShaderModule({\n    code: GLSL(\n      'fragment',\n      `#version 310 es\n        precision mediump float;\n        layout(location = 0) out vec4 fragColor;\n        void main() {\n          fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n        }\n      `\n    ),\n  });\n  const pl = t.device.createPipelineLayout({ bindGroupLayouts: [] });\n  const pipeline = t.device.createRenderPipeline({\n    vertexStage: { module: vertexModule, entryPoint: 'main' },\n    fragmentStage: { module: fragmentModule, entryPoint: 'main' },\n    layout: pl,\n    primitiveTopology: 'triangle-list',\n    rasterizationState: {\n      frontFace: 'ccw',\n    },\n    colorStates: [{ format: 'rgba8unorm', alphaBlend: {}, colorBlend: {} }],\n    vertexState: {\n      indexFormat: 'uint16',\n      vertexBuffers: [],\n    },\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        attachment: colorAttachmentView,\n        storeOp: 'store',\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  });\n  pass.setPipeline(pipeline);\n  pass.draw(3, 1, 0, 0);\n  pass.endPass();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, rowPitch: 256, imageHeight: 1 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, new Uint8Array([0x00, 0xff, 0x00, 0xff]));\n});\n"],"file":"rendering.spec.js"}