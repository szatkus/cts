{"version":3,"sources":["../../../../../src/suites/cts/command_buffer/compute/basic.spec.ts"],"names":["description","TestGroup","GPUTest","g","test","t","data","Uint32Array","src","device","createBuffer","size","usage","GPUBufferUsage","COPY_DST","STORAGE","dst","COPY_SRC","setSubData","bgl","createBindGroupLayout","bindings","binding","visibility","type","bg","createBindGroup","resource","buffer","offset","layout","module","createShaderModule","code","pl","createPipelineLayout","bindGroupLayouts","pipeline","createComputePipeline","computeStage","entryPoint","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","defaultQueue","submit","finish","expectContents"],"mappings":"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","sourcesContent":["export const description = `\nBasic command buffer compute tests.\n`;\n\nimport { TestGroup } from '../../../../framework/index.js';\nimport GLSL from '../../../../tools/glsl.macro.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = new TestGroup(GPUTest);\n\ng.test('memcpy', async t => {\n  const data = new Uint32Array([0x01020304]);\n  const src = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n  });\n  src.setSubData(0, data);\n\n  const bgl = t.device.createBindGroupLayout({\n    bindings: [\n      { binding: 0, visibility: 4, type: 'storage-buffer' },\n      { binding: 1, visibility: 4, type: 'storage-buffer' },\n    ],\n  });\n  const bg = t.device.createBindGroup({\n    bindings: [\n      { binding: 0, resource: { buffer: src, offset: 0, size: 4 } },\n      { binding: 1, resource: { buffer: dst, offset: 0, size: 4 } },\n    ],\n    layout: bgl,\n  });\n\n  const module = t.createShaderModule({\n    code: GLSL(\n      'compute',\n      `#version 310 es\n        layout(std140, set = 0, binding = 0) buffer Src {\n          int value;\n        } src;\n        layout(std140, set = 0, binding = 1) buffer Dst {\n          int value;\n        } dst;\n\n        void main() {\n          dst.value = src.value;\n        }\n      `\n    ),\n  });\n  const pl = t.device.createPipelineLayout({ bindGroupLayouts: [bgl] });\n  const pipeline = t.device.createComputePipeline({\n    computeStage: { module, entryPoint: 'main' },\n    layout: pl,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatch(1, 1, 1);\n  pass.endPass();\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n"],"file":"basic.spec.js"}