{"version":3,"sources":["../../../../src/suites/cts/command_buffer/copies.spec.ts"],"names":["description","TestGroup","GPUTest","g","test","t","data","Uint32Array","src","map","device","createBufferMapped","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","set","unmap","dst","createBuffer","encoder","createCommandEncoder","copyBufferToBuffer","defaultQueue","submit","finish","expectContents","mid","createTexture","width","height","depth","format","GPUTextureUsage","copyBufferToTexture","buffer","rowPitch","imageHeight","texture","mipLevel","origin","x","y","z","copyTextureToBuffer","midDesc","mid1","mid2","copyTextureToTexture"],"mappings":"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","sourcesContent":["export const description = `\ncopy{Buffer,Texture}To{Buffer,Texture} tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\nimport { GPUTest } from '../gpu_test.js';\n\nexport const g = new TestGroup(GPUTest);\n\ng.test('b2b', async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const [src, map] = t.device.createBufferMapped({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(map).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToBuffer(src, 0, dst, 0, 4);\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n\ng.test('b2t2b', async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const [src, map] = t.device.createBufferMapped({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(map).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const mid = t.device.createTexture({\n    size: { width: 1, height: 1, depth: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, rowPitch: 256, imageHeight: 1 },\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, rowPitch: 256, imageHeight: 1 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n\ng.test('b2t2t2b', async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const [src, map] = t.device.createBufferMapped({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(map).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const midDesc: GPUTextureDescriptor = {\n    size: { width: 1, height: 1, depth: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  };\n  const mid1 = t.device.createTexture(midDesc);\n  const mid2 = t.device.createTexture(midDesc);\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, rowPitch: 256, imageHeight: 1 },\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToTexture(\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, rowPitch: 256, imageHeight: 1 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n"],"file":"copies.spec.js"}