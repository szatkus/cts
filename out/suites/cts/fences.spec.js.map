{"version":3,"sources":["../../../src/suites/cts/fences.spec.ts"],"names":["description","attemptGarbageCollection","TestGroup","GPUTest","g","test","t","fence","queue","createFence","expect","getCompletedValue","initialValue","signal","onCompletion","promises","i","push","then","Promise","all","resolve","requestAnimationFrame","promise"],"mappings":"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","sourcesContent":["export const description = ``;\n\nimport { attemptGarbageCollection } from '../../framework/collect_garbage.js';\nimport { TestGroup } from '../../framework/index.js';\n\nimport { GPUTest } from './gpu_test.js';\n\nexport const g = new TestGroup(GPUTest);\n\ng.test('initial/no descriptor', t => {\n  const fence = t.queue.createFence();\n  t.expect(fence.getCompletedValue() === 0);\n});\n\ng.test('initial/empty descriptor', t => {\n  const fence = t.queue.createFence({});\n  t.expect(fence.getCompletedValue() === 0);\n});\n\ng.test('initial/descriptor with initialValue', t => {\n  const fence = t.queue.createFence({ initialValue: 2 });\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Promise resolves when onCompletion value is less than signal value.\ng.test('wait/less than signaled', async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(1);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Promise resolves when onCompletion value is equal to signal value.\ng.test('wait/equal to signaled', async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(2);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// All promises resolve when signal is called once.\ng.test('wait/signaled once', async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 20);\n  const promises = [];\n  for (let i = 0; i <= 20; ++i) {\n    promises.push(\n      fence.onCompletion(i).then(() => {\n        t.expect(fence.getCompletedValue() >= i);\n      })\n    );\n  }\n  await Promise.all(promises);\n});\n\n// Promise resolves when signal is called multiple times.\ng.test('wait/signaled multiple times', async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 1);\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(2);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Promise resolves if fence has already completed.\ng.test('wait/already completed', async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n\n  // Wait for value to update.\n  while (fence.getCompletedValue() < 2) {\n    await new Promise(resolve => {\n      requestAnimationFrame(resolve);\n    });\n  }\n\n  t.expect(fence.getCompletedValue() === 2);\n\n  await fence.onCompletion(2);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Test many calls to signal and wait on fence values one at a time.\ng.test('wait/many/serially', async t => {\n  const fence = t.queue.createFence();\n  for (let i = 1; i <= 20; ++i) {\n    t.queue.signal(fence, i);\n    await fence.onCompletion(i);\n    t.expect(fence.getCompletedValue() === i);\n  }\n});\n\n// Test many calls to signal and wait on all fence values.\ng.test('wait/many/parallel', async t => {\n  const fence = t.queue.createFence();\n  const promises = [];\n  for (let i = 1; i <= 20; ++i) {\n    t.queue.signal(fence, i);\n    promises.push(\n      fence.onCompletion(i).then(() => {\n        t.expect(fence.getCompletedValue() >= i);\n      })\n    );\n  }\n  await Promise.all(promises);\n  t.expect(fence.getCompletedValue() === 20);\n});\n\n// Test dropping references to the fence and onCompletion promise does not crash.\ng.test('drop/fence and promise', t => {\n  {\n    const fence = t.queue.createFence();\n    t.queue.signal(fence, 2);\n    fence.onCompletion(2);\n  }\n  attemptGarbageCollection();\n});\n\n// Test dropping references to the fence and holding the promise does not crash.\ng.test('drop/promise', async t => {\n  let promise;\n  {\n    const fence = t.queue.createFence();\n    t.queue.signal(fence, 2);\n    promise = fence.onCompletion(2);\n  }\n  attemptGarbageCollection();\n  await promise;\n});\n"],"file":"fences.spec.js"}