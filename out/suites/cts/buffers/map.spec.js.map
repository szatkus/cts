{"version":3,"sources":["../../../../src/suites/cts/buffers/map.spec.ts"],"names":["description","TestGroup","pbool","pcombine","poptions","MappingTest","g","test","t","size","params","buffer","device","createBuffer","usage","GPUBufferUsage","COPY_SRC","MAP_WRITE","arrayBuffer","mapWriteAsync","checkMapWrite","init","createBufferMapped","COPY_DST","MAP_READ","expected","Uint32Array","ArrayBuffer","data","i","length","unmap","actual","Uint8Array","mapReadAsync","expectBuffer","mappable","createBufferMappedAsync"],"mappings":"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","sourcesContent":["export const description = ``;\n\nimport { TestGroup, pbool, pcombine, poptions } from '../../../framework/index.js';\n\nimport { MappingTest } from './mapping_test.js';\n\nexport const g = new TestGroup(MappingTest);\n\ng.test('mapWriteAsync', async t => {\n  const size = t.params.size;\n  const buffer = t.device.createBuffer({\n    size,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n  });\n\n  const arrayBuffer = await buffer.mapWriteAsync();\n  t.checkMapWrite(buffer, arrayBuffer, size);\n}).params(poptions('size', [12, 512 * 1024]));\n\ng.test('mapReadAsync', async t => {\n  const size = t.params.size;\n\n  const [buffer, init] = t.device.createBufferMapped({\n    size,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n  });\n\n  const expected = new Uint32Array(new ArrayBuffer(size));\n  const data = new Uint32Array(init);\n  for (let i = 0; i < data.length; ++i) {\n    data[i] = expected[i] = i + 1;\n  }\n  buffer.unmap();\n\n  const actual = new Uint8Array(await buffer.mapReadAsync());\n  t.expectBuffer(actual, new Uint8Array(expected.buffer));\n}).params(poptions('size', [12, 512 * 1024]));\n\ng.test('createBufferMapped', async t => {\n  const size = t.params.size;\n  const [buffer, arrayBuffer] = t.device.createBufferMapped({\n    size,\n    usage: GPUBufferUsage.COPY_SRC | (t.params.mappable ? GPUBufferUsage.MAP_WRITE : 0),\n  });\n  t.checkMapWrite(buffer, arrayBuffer, size);\n}).params(\n  pcombine(\n    poptions('size', [12, 512 * 1024]), //\n    pbool('mappable')\n  )\n);\n\ng.test('createBufferMappedAsync', async t => {\n  const size = t.params.size;\n  const [buffer, arrayBuffer] = await t.device.createBufferMappedAsync({\n    size,\n    usage: GPUBufferUsage.COPY_SRC | (t.params.mappable ? GPUBufferUsage.MAP_WRITE : 0),\n  });\n  t.checkMapWrite(buffer, arrayBuffer, size);\n}).params(\n  pcombine(\n    poptions('size', [12, 512 * 1024]), //\n    pbool('mappable')\n  )\n);\n"],"file":"map.spec.js"}