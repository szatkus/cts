{"version":3,"sources":["../../../../src/suites/cts/buffers/map_detach.spec.ts"],"names":["description","TestGroup","pbool","pcombine","GPUTest","F","checkDetach","buffer","arrayBuffer","unmap","destroy","view","Uint8Array","expect","byteLength","length","g","test","t","device","createBuffer","size","usage","GPUBufferUsage","MAP_WRITE","mapWriteAsync","params","MAP_READ","mapReadAsync","desc","async","createBufferMappedAsync","createBufferMapped"],"mappings":"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","sourcesContent":["export const description = ``;\n\nimport { TestGroup, pbool, pcombine } from '../../../framework/index.js';\nimport { GPUTest } from '../gpu_test.js';\n\nclass F extends GPUTest {\n  checkDetach(buffer: GPUBuffer, arrayBuffer: ArrayBuffer, unmap: boolean, destroy: boolean): void {\n    const view = new Uint8Array(arrayBuffer);\n    this.expect(arrayBuffer.byteLength === 4);\n    this.expect(view.length === 4);\n\n    if (unmap) buffer.unmap();\n    if (destroy) buffer.destroy();\n\n    this.expect(arrayBuffer.byteLength === 0, 'ArrayBuffer should be detached');\n    this.expect(view.byteLength === 0, 'ArrayBufferView should be detached');\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('mapWriteAsync', async t => {\n  const buffer = t.device.createBuffer({ size: 4, usage: GPUBufferUsage.MAP_WRITE });\n  const arrayBuffer = await buffer.mapWriteAsync();\n  t.checkDetach(buffer, arrayBuffer, t.params.unmap, t.params.destroy);\n}).params([\n  { unmap: true, destroy: false }, //\n  { unmap: false, destroy: true },\n  { unmap: true, destroy: true },\n]);\n\ng.test('mapReadAsync', async t => {\n  const buffer = t.device.createBuffer({ size: 4, usage: GPUBufferUsage.MAP_READ });\n  const arrayBuffer = await buffer.mapReadAsync();\n  t.checkDetach(buffer, arrayBuffer, t.params.unmap, t.params.destroy);\n}).params([\n  { unmap: true, destroy: false }, //\n  { unmap: false, destroy: true },\n  { unmap: true, destroy: true },\n]);\n\ng.test('create mapped', async t => {\n  const desc = {\n    size: 4,\n    usage: GPUBufferUsage.MAP_WRITE,\n  };\n  const [buffer, arrayBuffer] = t.params.async\n    ? await t.device.createBufferMappedAsync(desc)\n    : t.device.createBufferMapped(desc);\n\n  const view = new Uint8Array(arrayBuffer);\n  t.expect(arrayBuffer.byteLength === 4);\n  t.expect(view.length === 4);\n\n  if (t.params.unmap) buffer.unmap();\n  if (t.params.destroy) buffer.destroy();\n  t.expect(arrayBuffer.byteLength === 0, 'ArrayBuffer should be detached');\n  t.expect(view.byteLength === 0, 'ArrayBufferView should be detached');\n}).params(\n  pcombine(\n    pbool('async'), //\n    [\n      { unmap: true, destroy: false },\n      { unmap: false, destroy: true },\n      { unmap: true, destroy: true },\n    ]\n  )\n);\n"],"file":"map_detach.spec.js"}