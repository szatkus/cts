{"version":3,"sources":["../../../../src/suites/cts/buffers/mapping_test.ts"],"names":["GPUTest","MappingTest","checkMapWrite","buffer","mappedContents","size","checkMapWriteZeroed","mappedView","Uint32Array","expected","ArrayBuffer","expect","byteLength","i","length","unmap","expectContents","arrayBuffer","expectedSize","view","Uint8Array","expectZero","actual","fail"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,gBAAxB;AAEA,OAAO,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AACvCE,EAAAA,aAAa,CAACC,MAAD,EAAoBC,cAApB,EAAiDC,IAAjD,EAAqE;AAChF,SAAKC,mBAAL,CAAyBF,cAAzB,EAAyCC,IAAzC;AAEA,UAAME,UAAU,GAAG,IAAIC,WAAJ,CAAgBJ,cAAhB,CAAnB;AACA,UAAMK,QAAQ,GAAG,IAAID,WAAJ,CAAgB,IAAIE,WAAJ,CAAgBL,IAAhB,CAAhB,CAAjB;AACA,SAAKM,MAAL,CAAYJ,UAAU,CAACK,UAAX,KAA0BP,IAAtC;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAAU,CAACO,MAA/B,EAAuC,EAAED,CAAzC,EAA4C;AAC1CN,MAAAA,UAAU,CAACM,CAAD,CAAV,GAAgBJ,QAAQ,CAACI,CAAD,CAAR,GAAcA,CAAC,GAAG,CAAlC;AACD;;AACDV,IAAAA,MAAM,CAACY,KAAP;AAEA,SAAKC,cAAL,CAAoBb,MAApB,EAA4BM,QAA5B;AACD;;AAEDH,EAAAA,mBAAmB,CAACW,WAAD,EAA2BC,YAA3B,EAAuD;AACxE,SAAKP,MAAL,CAAYM,WAAW,CAACL,UAAZ,KAA2BM,YAAvC;AACA,UAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeH,WAAf,CAAb;AACA,SAAKI,UAAL,CAAgBF,IAAhB;AACD;;AAEDE,EAAAA,UAAU,CAACC,MAAD,EAA2B;AACnC,UAAMjB,IAAI,GAAGiB,MAAM,CAACV,UAApB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAApB,EAA0B,EAAEQ,CAA5B,EAA+B;AAC7B,UAAIS,MAAM,CAACT,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnB,aAAKU,IAAL,CAAW,OAAMV,CAAE,yBAAwBS,MAAM,CAACT,CAAD,CAAI,EAArD;AACA;AACD;AACF;AACF;;AA7BsC","sourcesContent":["import { GPUTest } from '../gpu_test.js';\n\nexport class MappingTest extends GPUTest {\n  checkMapWrite(buffer: GPUBuffer, mappedContents: ArrayBuffer, size: number): void {\n    this.checkMapWriteZeroed(mappedContents, size);\n\n    const mappedView = new Uint32Array(mappedContents);\n    const expected = new Uint32Array(new ArrayBuffer(size));\n    this.expect(mappedView.byteLength === size);\n    for (let i = 0; i < mappedView.length; ++i) {\n      mappedView[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    this.expectContents(buffer, expected);\n  }\n\n  checkMapWriteZeroed(arrayBuffer: ArrayBuffer, expectedSize: number): void {\n    this.expect(arrayBuffer.byteLength === expectedSize);\n    const view = new Uint8Array(arrayBuffer);\n    this.expectZero(view);\n  }\n\n  expectZero(actual: Uint8Array): void {\n    const size = actual.byteLength;\n    for (let i = 0; i < size; ++i) {\n      if (actual[i] !== 0) {\n        this.fail(`at [${i}], expected zero, got ${actual[i]}`);\n        break;\n      }\n    }\n  }\n}\n"],"file":"mapping_test.js"}