{"version":3,"sources":["../../../src/suites/cts/format_info.ts"],"names":["poptions","textureFormatInfo","renderable","color","textureFormats","Object","keys","textureFormatParams","Array","from"],"mappings":"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","sourcesContent":["import { poptions } from '../../framework/index.js';\n\nexport interface TextureFormatInfo {\n  renderable: boolean;\n  color: boolean;\n  // Add fields as needed\n}\n\ninterface TextureFormats {\n  [k: string]: TextureFormatInfo;\n}\n\n// prettier-ignore\nexport const textureFormatInfo: TextureFormats = {\n  // Try to keep these manually-formatted in a readable grid.\n  // (Note: this list should always match the one in the spec.)\n\n  // 8-bit formats\n  'r8unorm':                { renderable:  true, color: true  },\n  'r8snorm':                { renderable: false, color: true  },\n  'r8uint':                 { renderable:  true, color: true  },\n  'r8sint':                 { renderable:  true, color: true  },\n  // 16-bit formats\n  'r16uint':                { renderable:  true, color: true  },\n  'r16sint':                { renderable:  true, color: true  },\n  'r16float':               { renderable:  true, color: true  },\n  'rg8unorm':               { renderable:  true, color: true  },\n  'rg8snorm':               { renderable: false, color: true  },\n  'rg8uint':                { renderable:  true, color: true  },\n  'rg8sint':                { renderable:  true, color: true  },\n  // 32-bit formats\n  'r32uint':                { renderable:  true, color: true  },\n  'r32sint':                { renderable:  true, color: true  },\n  'r32float':               { renderable:  true, color: true  },\n  'rg16uint':               { renderable:  true, color: true  },\n  'rg16sint':               { renderable:  true, color: true  },\n  'rg16float':              { renderable:  true, color: true  },\n  'rgba8unorm':             { renderable:  true, color: true  },\n  'rgba8unorm-srgb':        { renderable:  true, color: true  },\n  'rgba8snorm':             { renderable: false, color: true  },\n  'rgba8uint':              { renderable:  true, color: true  },\n  'rgba8sint':              { renderable:  true, color: true  },\n  'bgra8unorm':             { renderable:  true, color: true  },\n  'bgra8unorm-srgb':        { renderable:  true, color: true  },\n  // Packed 32-bit formats\n  'rgb10a2unorm':           { renderable:  true, color: true  },\n  'rg11b10float':           { renderable: false, color: true  },\n  // 64-bit formats\n  'rg32uint':               { renderable:  true, color: true  },\n  'rg32sint':               { renderable:  true, color: true  },\n  'rg32float':              { renderable:  true, color: true  },\n  'rgba16uint':             { renderable:  true, color: true  },\n  'rgba16sint':             { renderable:  true, color: true  },\n  'rgba16float':            { renderable:  true, color: true  },\n  // 128-bit formats\n  'rgba32uint':             { renderable:  true, color: true  },\n  'rgba32sint':             { renderable:  true, color: true  },\n  'rgba32float':            { renderable:  true, color: true  },\n  // Depth/stencil formats\n  'depth32float':           { renderable:  true, color: false },\n  'depth24plus':            { renderable:  true, color: false },\n  'depth24plus-stencil8':   { renderable:  true, color: false },\n};\nexport const textureFormats = Object.keys(textureFormatInfo) as GPUTextureFormat[];\nexport const textureFormatParams = Array.from(poptions('format', textureFormats));\n"],"file":"format_info.js"}