{"version":3,"sources":["../../../src/suites/cts/gpu_test.ts"],"names":["getGPU","Fixture","glslangInstance","GPUTest","undefined","init","gpu","adapter","requestAdapter","device","requestDevice","queue","defaultQueue","isSafari","test","navigator","userAgent","supportsSPIRV","popErrorScope","Error","ex","pushErrorScope","initialized","finalize","gpuValidationError","GPUValidationError","fail","message","gpuOutOfMemoryError","GPUOutOfMemoryError","initGLSL","glslangPath","glslangModule","default","skip","Promise","resolve","then","glslang","createShaderModule","desc","makeShaderModuleFromGLSL","stage","glsl","code","compileGLSL","expectContents","src","expected","exp","Uint8Array","buffer","byteOffset","byteLength","size","dst","createBuffer","usage","GPUBufferUsage","MAP_READ","COPY_DST","c","createCommandEncoder","copyBufferToBuffer","submit","finish","eventualAsyncExpectation","niceStack","actual","mapReadAsync","check","checkBuffer","rec","destroy","expectBuffer","lines","failedPixels","i","push","expHex","Array","from","map","x","toString","padStart","join","actHex"],"mappings":"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","sourcesContent":["import { getGPU } from '../../framework/gpu/implementation.js';\nimport { Fixture } from '../../framework/index.js';\n\ntype glslang = typeof import('@webgpu/glslang/dist/web-devel/glslang');\ntype Glslang = import('@webgpu/glslang/dist/web-devel/glslang').Glslang;\ntype ShaderStage = import('@webgpu/glslang/dist/web-devel/glslang').ShaderStage;\n\nlet glslangInstance: Glslang | undefined;\n\nexport class GPUTest extends Fixture {\n  device: GPUDevice = undefined!;\n  queue: GPUQueue = undefined!;\n  initialized = false;\n  private supportsSPIRV = true;\n\n  async init(): Promise<void> {\n    super.init();\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    this.device = await adapter.requestDevice();\n    this.queue = this.device.defaultQueue;\n\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    if (isSafari) {\n      this.supportsSPIRV = false;\n    }\n\n    try {\n      await this.device.popErrorScope();\n      throw new Error('There was an error scope on the stack at the beginning of the test');\n    } catch (ex) {}\n\n    this.device.pushErrorScope('out-of-memory');\n    this.device.pushErrorScope('validation');\n\n    this.initialized = true;\n  }\n\n  async finalize(): Promise<void> {\n    super.finalize();\n\n    if (this.initialized) {\n      const gpuValidationError = await this.device.popErrorScope();\n      if (gpuValidationError !== null) {\n        if (!(gpuValidationError instanceof GPUValidationError)) throw new Error();\n        this.fail(`Unexpected validation error occurred: ${gpuValidationError.message}`);\n      }\n\n      const gpuOutOfMemoryError = await this.device.popErrorScope();\n      if (gpuOutOfMemoryError !== null) {\n        if (!(gpuOutOfMemoryError instanceof GPUOutOfMemoryError)) throw new Error();\n        this.fail('Unexpected out-of-memory error occurred');\n      }\n    }\n  }\n\n  async initGLSL(): Promise<void> {\n    if (!glslangInstance) {\n      const glslangPath = '../../glslang.js';\n      let glslangModule: () => Promise<Glslang>;\n      try {\n        glslangModule = ((await import(glslangPath)) as glslang).default;\n      } catch (ex) {\n        this.skip('glslang is not available');\n      }\n      await new Promise(resolve => {\n        glslangModule().then((glslang: Glslang) => {\n          glslangInstance = glslang;\n          resolve();\n        });\n      });\n    }\n  }\n\n  createShaderModule(desc: GPUShaderModuleDescriptor): GPUShaderModule {\n    if (!this.supportsSPIRV) {\n      this.skip('SPIR-V not available');\n    }\n    return this.device.createShaderModule(desc);\n  }\n\n  makeShaderModuleFromGLSL(stage: ShaderStage, glsl: string): GPUShaderModule {\n    if (!glslangInstance) {\n      throw new Error('GLSL compiler is not instantiated. Run `await t.initGLSL()` first');\n    }\n    const code = glslangInstance.compileGLSL(glsl, stage, false);\n    return this.device.createShaderModule({ code });\n  }\n\n  // TODO: add an expectContents for textures, which logs data: uris on failure\n\n  expectContents(src: GPUBuffer, expected: ArrayBufferView): void {\n    const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n\n    const size = expected.buffer.byteLength;\n    const dst = this.device.createBuffer({\n      size: expected.buffer.byteLength,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n\n    const c = this.device.createCommandEncoder();\n    c.copyBufferToBuffer(src, 0, dst, 0, size);\n\n    this.queue.submit([c.finish()]);\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const actual = new Uint8Array(await dst.mapReadAsync());\n      const check = this.checkBuffer(actual, exp);\n      if (check !== undefined) {\n        niceStack.message = check;\n        this.rec.fail(niceStack);\n      }\n      dst.destroy();\n    });\n  }\n\n  expectBuffer(actual: Uint8Array, exp: Uint8Array): void {\n    const check = this.checkBuffer(actual, exp);\n    if (check !== undefined) {\n      this.rec.fail(new Error(check));\n    }\n  }\n\n  checkBuffer(actual: Uint8Array, exp: Uint8Array): string | undefined {\n    const size = exp.byteLength;\n    if (actual.byteLength !== size) {\n      return 'size mismatch';\n    }\n    const lines = [];\n    let failedPixels = 0;\n    for (let i = 0; i < size; ++i) {\n      if (actual[i] !== exp[i]) {\n        if (failedPixels > 4) {\n          lines.push('... and more');\n          break;\n        }\n        failedPixels++;\n        lines.push(`at [${i}], expected ${exp[i]}, got ${actual[i]}`);\n      }\n    }\n    if (size <= 256 && failedPixels > 0) {\n      const expHex = Array.from(exp)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      const actHex = Array.from(actual)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      lines.push('EXPECT: ' + expHex);\n      lines.push('ACTUAL: ' + actHex);\n    }\n    if (failedPixels) {\n      return lines.join('\\n');\n    }\n    return undefined;\n  }\n}\n"],"file":"gpu_test.js"}