{"version":3,"sources":["../../../../src/suites/cts/validation/setVertexBuffer.spec.ts"],"names":["description","TestGroup","range","ValidationTest","F","init","Promise","all","initGLSL","getVertexBuffer","device","createBuffer","size","usage","GPUBufferUsage","VERTEX","createRenderPipeline","bufferCount","descriptor","vertexStage","getVertexStage","fragmentStage","getFragmentStage","layout","getPipelineLayout","primitiveTopology","colorStates","format","vertexState","vertexBuffers","arrayStride","attributes","i","offset","shaderLocation","code","join","module","makeShaderModuleFromGLSL","entryPoint","createPipelineLayout","bindGroupLayouts","beginRenderPass","commandEncoder","attachmentTexture","createTexture","width","height","depth","GPUTextureUsage","OUTPUT_ATTACHMENT","colorAttachments","attachment","createView","loadValue","r","g","b","a","test","t","pipeline1","pipeline2","vertexBuffer1","vertexBuffer2","createCommandEncoder","renderPass","setPipeline","draw","endPass","expectValidationError","finish","setVertexBuffer"],"mappings":"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","sourcesContent":["export const description = `\nsetVertexBuffer validation tests.\n`;\n\nimport { TestGroup, range } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  async init(): Promise<void> {\n    await Promise.all([super.init(), this.initGLSL()]);\n  }\n\n  getVertexBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 256,\n      usage: GPUBufferUsage.VERTEX,\n    });\n  }\n\n  createRenderPipeline(bufferCount: number): GPURenderPipeline {\n    const descriptor: GPURenderPipelineDescriptor = {\n      vertexStage: this.getVertexStage(bufferCount),\n      fragmentStage: this.getFragmentStage(),\n      layout: this.getPipelineLayout(),\n      primitiveTopology: 'triangle-list',\n      colorStates: [{ format: 'rgba8unorm' }],\n      vertexState: {\n        vertexBuffers: [\n          {\n            arrayStride: 3 * 4,\n            attributes: range(bufferCount, i => ({\n              format: 'float3',\n              offset: 0,\n              shaderLocation: i,\n            })),\n          },\n        ],\n      },\n    };\n    return this.device.createRenderPipeline(descriptor);\n  }\n\n  getVertexStage(bufferCount: number): GPUProgrammableStageDescriptor {\n    const code = `\n      #version 450\n      ${range(bufferCount, i => `\\nlayout(location = ${i}) in vec3 a_position${i};`).join('')}\n      void main() {\n        gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n       }\n    `;\n    return {\n      module: this.makeShaderModuleFromGLSL('vertex', code),\n      entryPoint: 'main',\n    };\n  }\n\n  getFragmentStage(): GPUProgrammableStageDescriptor {\n    const code = `\n      #version 450\n      layout(location = 0) out vec4 fragColor;\n      void main() {\n        fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n      }\n    `;\n    return {\n      module: this.makeShaderModuleFromGLSL('fragment', code),\n      entryPoint: 'main',\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n\n  beginRenderPass(commandEncoder: GPUCommandEncoder): GPURenderPassEncoder {\n    const attachmentTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 16, height: 16, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    return commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: attachmentTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('vertex buffers inherit from previous pipeline', async t => {\n  const pipeline1 = t.createRenderPipeline(1);\n  const pipeline2 = t.createRenderPipeline(2);\n\n  const vertexBuffer1 = t.getVertexBuffer();\n  const vertexBuffer2 = t.getVertexBuffer();\n\n  {\n    // Check failure when vertex buffer is not set\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setPipeline(pipeline1);\n    renderPass.draw(3, 1, 0, 0);\n    renderPass.endPass();\n\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    });\n  }\n  {\n    // Check success when vertex buffer is inherited from previous pipeline\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setPipeline(pipeline2);\n    renderPass.setVertexBuffer(0, vertexBuffer1);\n    renderPass.setVertexBuffer(1, vertexBuffer2);\n    renderPass.draw(3, 1, 0, 0);\n    renderPass.setPipeline(pipeline1);\n    renderPass.draw(3, 1, 0, 0);\n    renderPass.endPass();\n\n    commandEncoder.finish();\n  }\n});\n\ng.test('vertex buffers do not inherit between render passes', async t => {\n  const pipeline1 = t.createRenderPipeline(1);\n  const pipeline2 = t.createRenderPipeline(2);\n\n  const vertexBuffer1 = t.getVertexBuffer();\n  const vertexBuffer2 = t.getVertexBuffer();\n\n  {\n    // Check success when vertex buffer is set for each render pass\n    const commandEncoder = t.device.createCommandEncoder();\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline2);\n      renderPass.setVertexBuffer(0, vertexBuffer1);\n      renderPass.setVertexBuffer(1, vertexBuffer2);\n      renderPass.draw(3, 1, 0, 0);\n      renderPass.endPass();\n    }\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline1);\n      renderPass.setVertexBuffer(0, vertexBuffer1);\n      renderPass.draw(3, 1, 0, 0);\n      renderPass.endPass();\n    }\n    commandEncoder.finish();\n  }\n  {\n    // Check failure because vertex buffer is not inherited in second subpass\n    const commandEncoder = t.device.createCommandEncoder();\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline2);\n      renderPass.setVertexBuffer(0, vertexBuffer1);\n      renderPass.setVertexBuffer(1, vertexBuffer2);\n      renderPass.draw(3, 1, 0, 0);\n      renderPass.endPass();\n    }\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline1);\n      renderPass.draw(3, 1, 0, 0);\n      renderPass.endPass();\n    }\n\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    });\n  }\n});\n"],"file":"setVertexBuffer.spec.js"}