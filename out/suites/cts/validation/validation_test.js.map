{"version":3,"sources":["../../../../src/suites/cts/validation/validation_test.ts"],"names":["GPUTest","ValidationTest","getErrorBuffer","device","pushErrorScope","errorBuffer","createBuffer","size","usage","popErrorScope","expectValidationError","fn","shouldError","promise","eventualAsyncExpectation","niceStack","gpuValidationError","message","rec","fail","GPUValidationError","debug"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,gBAAxB;AAEA,OAAO,MAAMC,cAAN,SAA6BD,OAA7B,CAAqC;AAC1C,QAAME,cAAN,GAA2C;AACzC,SAAKC,MAAL,CAAYC,cAAZ,CAA2B,YAA3B;AACA,UAAMC,WAAW,GAAG,KAAKF,MAAL,CAAYG,YAAZ,CAAyB;AAC3CC,MAAAA,IAAI,EAAE,IADqC;AAE3CC,MAAAA,KAAK,EAAE,MAFoC,CAE5B;;AAF4B,KAAzB,CAApB;AAIA,UAAM,KAAKL,MAAL,CAAYM,aAAZ,EAAN;AACA,WAAOJ,WAAP;AACD;;AAEDK,EAAAA,qBAAqB,CAACC,EAAD,EAAeC,WAAoB,GAAG,IAAtC,EAAkD;AACrE;AACA,QAAIA,WAAW,KAAK,KAApB,EAA2B;AACzBD,MAAAA,EAAE;AACF;AACD;;AAED,SAAKR,MAAL,CAAYC,cAAZ,CAA2B,YAA3B;AACAO,IAAAA,EAAE;AACF,UAAME,OAAO,GAAG,KAAKV,MAAL,CAAYM,aAAZ,EAAhB;AAEA,SAAKK,wBAAL,CAA8B,MAAMC,SAAN,IAAmB;AAC/C,YAAMC,kBAAkB,GAAG,MAAMH,OAAjC;;AACA,UAAI,CAACG,kBAAL,EAAyB;AACvBD,QAAAA,SAAS,CAACE,OAAV,GAAoB,gCAApB;AACA,aAAKC,GAAL,CAASC,IAAT,CAAcJ,SAAd;AACD,OAHD,MAGO,IAAIC,kBAAkB,YAAYI,kBAAlC,EAAsD;AAC3DL,QAAAA,SAAS,CAACE,OAAV,GAAqB,+BAA8BD,kBAAkB,CAACC,OAAQ,EAA9E;AACA,aAAKC,GAAL,CAASG,KAAT,CAAeN,SAAf;AACD;AACF,KATD;AAUD;;AAhCyC","sourcesContent":["import { GPUTest } from '../gpu_test.js';\n\nexport class ValidationTest extends GPUTest {\n  async getErrorBuffer(): Promise<GPUBuffer> {\n    this.device.pushErrorScope('validation');\n    const errorBuffer = this.device.createBuffer({\n      size: 1024,\n      usage: 0xffff, // Invalid GPUBufferUsage\n    });\n    await this.device.popErrorScope();\n    return errorBuffer;\n  }\n\n  expectValidationError(fn: Function, shouldError: boolean = true): void {\n    // If no error is expected, we let the scope surrounding the test catch it.\n    if (shouldError === false) {\n      fn();\n      return;\n    }\n\n    this.device.pushErrorScope('validation');\n    fn();\n    const promise = this.device.popErrorScope();\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const gpuValidationError = await promise;\n      if (!gpuValidationError) {\n        niceStack.message = 'Validation error was expected.';\n        this.rec.fail(niceStack);\n      } else if (gpuValidationError instanceof GPUValidationError) {\n        niceStack.message = `Captured validation error - ${gpuValidationError.message}`;\n        this.rec.debug(niceStack);\n      }\n    });\n  }\n}\n"],"file":"validation_test.js"}