{"version":3,"sources":["../../../../src/suites/cts/validation/vertex_state.spec.ts"],"names":["description","TestGroup","ValidationTest","MAX_VERTEX_ATTRIBUTES","MAX_VERTEX_BUFFER_END","MAX_VERTEX_BUFFER_ARRAY_STRIDE","MAX_VERTEX_BUFFERS","VERTEX_SHADER_CODE_WITH_NO_INPUT","clone","descriptor","JSON","parse","stringify","F","init","Promise","all","initGLSL","getDescriptor","vertexState","vertexShaderCode","vertexStage","getVertexStage","fragmentStage","getFragmentStage","layout","getPipelineLayout","primitiveTopology","colorStates","format","code","module","makeShaderModuleFromGLSL","entryPoint","device","createPipelineLayout","bindGroupLayouts","g","test","t","createRenderPipeline","vertexBuffers","arrayStride","attributes","offset","shaderLocation","Float32Array","BYTES_PER_ELEMENT","expectValidationError","badVertexState","goodVertexState","i","push","vertexAttributes","Number","MAX_SAFE_INTEGER"],"mappings":"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","sourcesContent":["export const description = `\nvertexState validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst MAX_VERTEX_ATTRIBUTES: number = 16;\nconst MAX_VERTEX_BUFFER_END: number = 2048;\nconst MAX_VERTEX_BUFFER_ARRAY_STRIDE: number = 2048;\nconst MAX_VERTEX_BUFFERS: number = 16;\n\nconst VERTEX_SHADER_CODE_WITH_NO_INPUT = `\n  #version 450\n  void main() {\n    gl_Position = vec4(0.0);\n  }\n`;\n\nfunction clone(descriptor: GPUVertexStateDescriptor): GPUVertexStateDescriptor {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nclass F extends ValidationTest {\n  async init(): Promise<void> {\n    await Promise.all([super.init(), this.initGLSL()]);\n  }\n\n  getDescriptor(\n    vertexState: GPUVertexStateDescriptor,\n    vertexShaderCode: string\n  ): GPURenderPipelineDescriptor {\n    const descriptor: GPURenderPipelineDescriptor = {\n      vertexStage: this.getVertexStage(vertexShaderCode),\n      fragmentStage: this.getFragmentStage(),\n      layout: this.getPipelineLayout(),\n      primitiveTopology: 'triangle-list',\n      colorStates: [{ format: 'rgba8unorm' }],\n      vertexState,\n    };\n    return descriptor;\n  }\n\n  getVertexStage(code: string): GPUProgrammableStageDescriptor {\n    return {\n      module: this.makeShaderModuleFromGLSL('vertex', code),\n      entryPoint: 'main',\n    };\n  }\n\n  getFragmentStage(): GPUProgrammableStageDescriptor {\n    const code = `\n      #version 450\n      layout(location = 0) out vec4 fragColor;\n      void main() {\n        fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n      }\n    `;\n    return {\n      module: this.makeShaderModuleFromGLSL('fragment', code),\n      entryPoint: 'main',\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('an empty vertex input is valid', t => {\n  const vertexState: GPUVertexStateDescriptor = {};\n  const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n  t.device.createRenderPipeline(descriptor);\n});\n\ng.test('a null buffer is valid', t => {\n  {\n    // One null buffer is OK\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    //  One null buffer followed by a buffer is OK\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [],\n        },\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    //  One null buffer sitting between buffers is OK\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n        {\n          arrayStride: 0,\n          attributes: [],\n        },\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 1,\n            },\n          ],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n});\n\ng.test('pipeline vertex buffers are backed by attributes in vertex input', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 2 * Float32Array.BYTES_PER_ELEMENT,\n        attributes: [\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 0,\n          },\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 1,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case: pipeline with one input per attribute\n    const code = `\n      #version 450\n      layout(location = 0) in vec4 a;\n      layout(location = 1) in vec4 b;\n      void main() {\n          gl_Position = vec4(0.0);\n      }\n    `;\n    const descriptor = t.getDescriptor(vertexState, code);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Check it is valid for the pipeline to use a subset of the VertexState\n    const code = `\n      #version 450\n      layout(location = 0) in vec4 a;\n      void main() {\n          gl_Position = vec4(0.0);\n      }\n    `;\n    const descriptor = t.getDescriptor(vertexState, code);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Check for an error when the pipeline uses an attribute not in the vertex input\n    const code = `\n      #version 450\n      layout(location = 2) in vec4 a;\n      void main() {\n          gl_Position = vec4(0.0);\n      }\n    `;\n    const descriptor = t.getDescriptor(vertexState, code);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('an arrayStride of 0 is valid', t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Works ok without attributes\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Works ok with attributes at a large-ish offset\n    vertexState.vertexBuffers![0].attributes![0].offset = 128;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n});\n\ng.test('offset should be within vertex buffer arrayStride if arrayStride is not zero', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 2 * Float32Array.BYTES_PER_ELEMENT,\n        attributes: [\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 0,\n          },\n          {\n            format: 'float',\n            offset: Float32Array.BYTES_PER_ELEMENT,\n            shaderLocation: 1,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting correct arrayStride and offset\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test vertex attribute offset exceed vertex buffer arrayStride range\n    const badVertexState = clone(vertexState);\n    badVertexState.vertexBuffers![0].attributes[1].format = 'float2';\n    const descriptor = t.getDescriptor(badVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n  {\n    // Test vertex attribute offset exceed vertex buffer arrayStride range\n    const badVertexState = clone(vertexState);\n    badVertexState.vertexBuffers![0].arrayStride = Float32Array.BYTES_PER_ELEMENT;\n    const descriptor = t.getDescriptor(badVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n  {\n    // It's OK if arrayStride is zero\n    const goodVertexState = clone(vertexState);\n    goodVertexState.vertexBuffers![0].arrayStride = 0;\n    const descriptor = t.getDescriptor(goodVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n});\n\ng.test('check two attributes overlapping', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 2 * Float32Array.BYTES_PER_ELEMENT,\n        attributes: [\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 0,\n          },\n          {\n            format: 'float',\n            offset: Float32Array.BYTES_PER_ELEMENT,\n            shaderLocation: 1,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting correct arrayStride and offset\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test two attributes overlapping\n    const badVertexState = clone(vertexState);\n    badVertexState.vertexBuffers![0].attributes[0].format = 'int2';\n    const descriptor = t.getDescriptor(badVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check out of bounds condition on total number of vertex buffers', async t => {\n  const vertexBuffers: GPUVertexBufferLayoutDescriptor[] = [];\n\n  for (let i = 0; i < MAX_VERTEX_BUFFERS; i++) {\n    vertexBuffers.push({\n      arrayStride: 0,\n      attributes: [\n        {\n          format: 'float',\n          offset: 0,\n          shaderLocation: i,\n        },\n      ],\n    });\n  }\n  {\n    // Control case, setting max vertex buffer number\n    const vertexState: GPUVertexStateDescriptor = { vertexBuffers };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test vertex buffer number exceed the limit\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        ...vertexBuffers,\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: MAX_VERTEX_BUFFERS,\n            },\n          ],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check out of bounds on number of vertex attributes on a single vertex buffer', async t => {\n  const vertexAttributes: GPUVertexAttributeDescriptor[] = [];\n\n  for (let i = 0; i < MAX_VERTEX_ATTRIBUTES; i++) {\n    vertexAttributes.push({\n      format: 'float',\n      offset: 0,\n      shaderLocation: i,\n    });\n  }\n  {\n    // Control case, setting max vertex buffer number\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: vertexAttributes,\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test vertex attribute number exceed the limit\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [\n            ...vertexAttributes,\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: MAX_VERTEX_ATTRIBUTES,\n            },\n          ],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check out of bounds on number of vertex attributes across vertex buffers', async t => {\n  const vertexBuffers: GPUVertexBufferLayoutDescriptor[] = [];\n  for (let i = 0; i < MAX_VERTEX_ATTRIBUTES; i++) {\n    vertexBuffers.push({\n      arrayStride: 0,\n      attributes: [\n        {\n          format: 'float',\n          offset: 0,\n          shaderLocation: i,\n        },\n      ],\n    });\n  }\n\n  {\n    // Control case, setting max vertex buffer number\n    const vertexState: GPUVertexStateDescriptor = { vertexBuffers };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test vertex attribute number exceed the limit\n    vertexBuffers[MAX_VERTEX_ATTRIBUTES - 1].attributes.push({\n      format: 'float',\n      offset: 0,\n      shaderLocation: MAX_VERTEX_ATTRIBUTES,\n    });\n    const vertexState: GPUVertexStateDescriptor = { vertexBuffers };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check out of bounds condition on input strides', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: MAX_VERTEX_BUFFER_ARRAY_STRIDE,\n        attributes: [],\n      },\n    ],\n  };\n  {\n    // Control case, setting max input arrayStride\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test input arrayStride OOB\n    vertexState.vertexBuffers![0].arrayStride = MAX_VERTEX_BUFFER_ARRAY_STRIDE + 4;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check multiple of 4 bytes constraint on input arrayStride', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 4,\n        attributes: [\n          {\n            format: 'uchar2',\n            offset: 0,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting input arrayStride 4 bytes\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test input arrayStride not multiple of 4 bytes\n    vertexState.vertexBuffers![0].arrayStride = 2;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('identical duplicate attributes are invalid', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting attribute 0\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Oh no, attribute 0 is set twice\n    vertexState.vertexBuffers![0].attributes.push({\n      format: 'float',\n      offset: 0,\n      shaderLocation: 0,\n    });\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('we cannot set same shader location', async t => {\n  {\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n            {\n              format: 'float',\n              offset: Float32Array.BYTES_PER_ELEMENT,\n              shaderLocation: 1,\n            },\n          ],\n        },\n      ],\n    };\n    {\n      // Control case, setting different shader locations in two attributes\n      const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n      t.device.createRenderPipeline(descriptor);\n    }\n    {\n      // Test same shader location in two attributes in the same buffer\n      vertexState.vertexBuffers![0].attributes![1].shaderLocation = 0;\n      const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n      t.expectValidationError(() => {\n        t.device.createRenderPipeline(descriptor);\n      });\n    }\n  }\n  {\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n      ],\n    };\n    // Test same shader location in two attributes in different buffers\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check out of bounds condition on attribute shader location', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: MAX_VERTEX_ATTRIBUTES - 1,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting last attribute shader location\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test attribute location OOB\n    vertexState.vertexBuffers![0].attributes![0].shaderLocation = MAX_VERTEX_ATTRIBUTES;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check attribute offset out of bounds', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float2',\n            offset: MAX_VERTEX_BUFFER_END - 2 * Float32Array.BYTES_PER_ELEMENT,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting max attribute offset to MAX_VERTEX_BUFFER_END - 8\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Control case, setting attribute offset to 8\n    vertexState.vertexBuffers![0].attributes![0].offset = 8;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test attribute offset out of bounds\n    vertexState.vertexBuffers![0].attributes![0].offset = MAX_VERTEX_BUFFER_END - 4;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check multiple of 4 bytes constraint on offset', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float',\n            offset: Float32Array.BYTES_PER_ELEMENT,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting offset 4 bytes\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test offset of 2 bytes with uchar2 format\n    vertexState.vertexBuffers![0].attributes![0].offset = 2;\n    vertexState.vertexBuffers![0].attributes![0].format = 'uchar2';\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n  {\n    // Test offset of 2 bytes with float format\n    vertexState.vertexBuffers![0].attributes![0].offset = 2;\n    vertexState.vertexBuffers![0].attributes![0].format = 'float';\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check attribute offset overflow', async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float',\n            offset: Number.MAX_SAFE_INTEGER,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n  t.expectValidationError(() => {\n    t.device.createRenderPipeline(descriptor);\n  });\n});\n"],"file":"vertex_state.spec.js"}