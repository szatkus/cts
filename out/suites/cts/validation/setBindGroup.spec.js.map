{"version":3,"sources":["../../../../src/suites/cts/validation/setBindGroup.spec.ts"],"names":["description","TestGroup","pcombine","poptions","ValidationTest","F","makeAttachmentTexture","device","createTexture","format","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","testComputePass","bindGroup","dynamicOffsets","encoder","createCommandEncoder","computePass","beginComputePass","setBindGroup","endPass","finish","testRenderPass","renderPass","beginRenderPass","colorAttachments","attachment","createView","loadValue","r","g","b","a","testRenderBundle","createRenderBundleEncoder","colorFormats","test","t","bindGroupLayout","createBindGroupLayout","bindings","createBindGroup","layout","type","params","expectValidationError","fail","MIN_DYNAMIC_BUFFER_OFFSET_ALIGNMENT","BINDING_SIZE","binding","visibility","GPUShaderStage","COMPUTE","FRAGMENT","hasDynamicOffset","uniformBuffer","createBuffer","GPUBufferUsage","UNIFORM","storageBuffer","STORAGE","resource","buffer","_success","Number","MAX_SAFE_INTEGER"],"mappings":"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","sourcesContent":["export const description = `\nsetBindGroup validation tests.\n`;\n\nimport { TestGroup, pcombine, poptions } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  makeAttachmentTexture(): GPUTexture {\n    return this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 16, height: 16, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n  }\n\n  testComputePass(bindGroup: GPUBindGroup, dynamicOffsets: number[]): void {\n    const encoder = this.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass();\n    computePass.setBindGroup(0, bindGroup, dynamicOffsets);\n    computePass.endPass();\n    encoder.finish();\n  }\n\n  testRenderPass(bindGroup: GPUBindGroup, dynamicOffsets: number[]): void {\n    const encoder = this.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: this.makeAttachmentTexture().createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n    renderPass.setBindGroup(0, bindGroup, dynamicOffsets);\n    renderPass.endPass();\n    encoder.finish();\n  }\n\n  testRenderBundle(bindGroup: GPUBindGroup, dynamicOffsets: number[]): void {\n    const encoder = this.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n    });\n    encoder.setBindGroup(0, bindGroup, dynamicOffsets);\n    encoder.finish();\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('dynamic offsets passed but not expected/compute pass', async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({ bindings: [] });\n  const bindGroup = t.device.createBindGroup({ layout: bindGroupLayout, bindings: [] });\n\n  const { type } = t.params;\n  const dynamicOffsets = [0];\n\n  t.expectValidationError(() => {\n    if (type === 'compute') {\n      const encoder = t.device.createCommandEncoder();\n      const computePass = encoder.beginComputePass();\n      computePass.setBindGroup(0, bindGroup, dynamicOffsets);\n      computePass.endPass();\n      encoder.finish();\n    } else if (type === 'renderpass') {\n      const encoder = t.device.createCommandEncoder();\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            attachment: t.makeAttachmentTexture().createView(),\n            loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          },\n        ],\n      });\n      renderPass.setBindGroup(0, bindGroup, dynamicOffsets);\n      renderPass.endPass();\n      encoder.finish();\n    } else if (type === 'renderbundle') {\n      const encoder = t.device.createRenderBundleEncoder({\n        colorFormats: ['rgba8unorm'],\n      });\n      encoder.setBindGroup(0, bindGroup, dynamicOffsets);\n      encoder.finish();\n    } else {\n      t.fail();\n    }\n  });\n}).params(poptions('type', ['compute', 'renderpass', 'renderbundle']));\n\ng.test('dynamic offsets match expectations in pass encoder', async t => {\n  // Dynamic buffer offsets require offset to be divisible by 256\n  const MIN_DYNAMIC_BUFFER_OFFSET_ALIGNMENT = 256;\n  const BINDING_SIZE = 9;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT,\n        type: 'uniform-buffer',\n        hasDynamicOffset: true,\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT,\n        type: 'storage-buffer',\n        hasDynamicOffset: true,\n      },\n    ],\n  });\n\n  const uniformBuffer = t.device.createBuffer({\n    size: 2 * MIN_DYNAMIC_BUFFER_OFFSET_ALIGNMENT + 8,\n    usage: GPUBufferUsage.UNIFORM,\n  });\n\n  const storageBuffer = t.device.createBuffer({\n    size: 2 * MIN_DYNAMIC_BUFFER_OFFSET_ALIGNMENT + 8,\n    usage: GPUBufferUsage.STORAGE,\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: bindGroupLayout,\n    bindings: [\n      {\n        binding: 0,\n        resource: {\n          buffer: uniformBuffer,\n          size: BINDING_SIZE,\n        },\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: storageBuffer,\n          size: BINDING_SIZE,\n        },\n      },\n    ],\n  });\n\n  const { type, dynamicOffsets, _success } = t.params;\n\n  t.expectValidationError(() => {\n    if (type === 'compute') {\n      t.testComputePass(bindGroup, dynamicOffsets);\n    } else if (type === 'renderpass') {\n      t.testRenderPass(bindGroup, dynamicOffsets);\n    } else if (type === 'renderbundle') {\n      t.testRenderBundle(bindGroup, dynamicOffsets);\n    } else {\n      t.fail();\n    }\n    t.testComputePass(bindGroup, dynamicOffsets);\n  }, !_success);\n}).params(\n  pcombine(poptions('type', ['compute', 'renderpass', 'renderbundle']), [\n    { dynamicOffsets: [256, 0], _success: true }, // Dynamic offsets aligned\n    { dynamicOffsets: [1, 2], _success: false }, // Dynamic offsets not aligned\n\n    // Wrong number of dynamic offsets\n    { dynamicOffsets: [256, 0, 0], _success: false },\n    { dynamicOffsets: [256], _success: false },\n    { dynamicOffsets: [], _success: false },\n\n    // Dynamic uniform buffer out of bounds because of binding size\n    { dynamicOffsets: [512, 0], _success: false },\n    { dynamicOffsets: [1024, 0], _success: false },\n    { dynamicOffsets: [Number.MAX_SAFE_INTEGER, 0], _success: false },\n\n    // Dynamic storage buffer out of bounds because of binding size\n    { dynamicOffsets: [0, 512], _success: false },\n    { dynamicOffsets: [0, 1024], _success: false },\n    { dynamicOffsets: [0, Number.MAX_SAFE_INTEGER], _success: false },\n  ])\n);\n\n// TODO: test error bind group\n"],"file":"setBindGroup.spec.js"}