{"version":3,"sources":["../../../../src/suites/cts/validation/createPipelineLayout.spec.ts"],"names":["description","TestGroup","poptions","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","t","type","_expectedMaxDynamicBufferCount","params","maxDynamicBufferBindings","i","push","binding","visibility","GPUShaderStage","COMPUTE","hasDynamicOffset","maxDynamicBufferBindGroupLayout","device","createBindGroupLayout","bindings","goodDescriptor","goodPipelineLayoutDescriptor","bindGroupLayouts","createPipelineLayout","badDescriptor","badPipelineLayoutDescriptor","expectValidationError","bindGroupLayoutDescriptor","maxBindGroupLayouts","map"],"mappings":"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","sourcesContent":["export const description = `\ncreatePipelineLayout validation tests.\n`;\n\nimport { TestGroup, poptions } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone(descriptor: GPUBindGroupLayoutDescriptor): GPUBindGroupLayoutDescriptor {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = new TestGroup(ValidationTest);\n\ng.test('number of dynamic buffers exceeds the maximum value', async t => {\n  const { type, _expectedMaxDynamicBufferCount } = t.params;\n\n  const maxDynamicBufferBindings: GPUBindGroupLayoutBinding[] = [];\n  for (let i = 0; i < _expectedMaxDynamicBufferCount; i++) {\n    maxDynamicBufferBindings.push({\n      binding: i,\n      visibility: GPUShaderStage.COMPUTE,\n      type,\n      hasDynamicOffset: true,\n    });\n  }\n\n  const maxDynamicBufferBindGroupLayout = t.device.createBindGroupLayout({\n    bindings: maxDynamicBufferBindings,\n  });\n\n  const goodDescriptor: GPUBindGroupLayoutDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type,\n        hasDynamicOffset: false,\n      },\n    ],\n  };\n\n  const goodPipelineLayoutDescriptor = {\n    bindGroupLayouts: [\n      maxDynamicBufferBindGroupLayout,\n      t.device.createBindGroupLayout(goodDescriptor),\n    ],\n  };\n\n  // Control case\n  t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n  // Check dynamic buffers exceed maximum in pipeline layout.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.bindings![0].hasDynamicOffset = true;\n\n  const badPipelineLayoutDescriptor = {\n    bindGroupLayouts: [\n      maxDynamicBufferBindGroupLayout,\n      t.device.createBindGroupLayout(badDescriptor),\n    ],\n  };\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n  });\n}).params([\n  { type: 'storage-buffer', _expectedMaxDynamicBufferCount: 4 },\n  { type: 'uniform-buffer', _expectedMaxDynamicBufferCount: 8 },\n]);\n\ng.test('number of bind group layouts exceeds the maximum value', async t => {\n  const { type } = t.params;\n\n  const bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type,\n      },\n    ],\n  };\n\n  // 4 is the maximum number of bind group layouts.\n  const maxBindGroupLayouts = [1, 2, 3, 4].map(() =>\n    t.device.createBindGroupLayout(bindGroupLayoutDescriptor)\n  );\n\n  const goodPipelineLayoutDescriptor = {\n    bindGroupLayouts: maxBindGroupLayouts,\n  };\n\n  // Control case\n  t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n  // Check bind group layouts exceed maximum in pipeline layout.\n  const badPipelineLayoutDescriptor = {\n    bindGroupLayouts: [\n      ...maxBindGroupLayouts,\n      t.device.createBindGroupLayout(bindGroupLayoutDescriptor),\n    ],\n  };\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n  });\n}).params(poptions('type', ['storage-buffer', 'uniform-buffer']));\n"],"file":"createPipelineLayout.spec.js"}