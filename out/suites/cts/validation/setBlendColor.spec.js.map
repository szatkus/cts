{"version":3,"sources":["../../../../src/suites/cts/validation/setBlendColor.spec.ts"],"names":["description","TestGroup","ValidationTest","F","beginRenderPass","commandEncoder","attachmentTexture","device","createTexture","format","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","colorAttachments","attachment","createView","loadValue","r","g","b","a","test","t","createCommandEncoder","renderPass","setBlendColor","endPass","finish","values","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","value"],"mappings":";;;;AAAA,OAAO,MAAMA,WAAW,GAAI;;CAArB;AAIP,SAASC,SAAT,QAA0B,6BAA1B;AAEA,SAASC,cAAT,QAA+B,sBAA/B,C,CAEA;;AACA,MAAMC,CAAN,SAAgBD,cAAhB,CAA+B;AAC7BE,EAAAA,eAAe,CAACC,cAAD,EAA0D;AACvE,UAAMC,iBAAiB,GAAG,KAAKC,MAAL,CAAYC,aAAZ,CAA0B;AAClDC,MAAAA,MAAM,EAAE,YAD0C;AAElDC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,MAAM,EAAE,EAArB;AAAyBC,QAAAA,KAAK,EAAE;AAAhC,OAF4C;AAGlDC,MAAAA,KAAK,EAAEC,eAAe,CAACC;AAH2B,KAA1B,CAA1B;AAMA,WAAOX,cAAc,CAACD,eAAf,CAA+B;AACpCa,MAAAA,gBAAgB,EAAE,CAChB;AACEC,QAAAA,UAAU,EAAEZ,iBAAiB,CAACa,UAAlB,EADd;AAEEC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,CAAC,EAAE,GAAL;AAAUC,UAAAA,CAAC,EAAE,GAAb;AAAkBC,UAAAA,CAAC,EAAE,GAArB;AAA0BC,UAAAA,CAAC,EAAE;AAA7B;AAFb,OADgB;AADkB,KAA/B,CAAP;AAQD;;AAhB4B;;AAmB/B,OAAO,MAAMF,CAAC,GAAG,IAAIrB,SAAJ,CAAcE,CAAd,CAAV;AAEPmB,CAAC,CAACG,IAAF,CAAO,4BAAP,EAAqCC,CAAC,IAAI;AACxC,QAAMrB,cAAc,GAAGqB,CAAC,CAACnB,MAAF,CAASoB,oBAAT,EAAvB;AACA,QAAMC,UAAU,GAAGF,CAAC,CAACtB,eAAF,CAAkBC,cAAlB,CAAnB;AACAuB,EAAAA,UAAU,CAACC,aAAX,CAAyB;AAAER,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcC,IAAAA,CAAC,EAAE,CAAjB;AAAoBC,IAAAA,CAAC,EAAE;AAAvB,GAAzB;AACAI,EAAAA,UAAU,CAACE,OAAX;AACAzB,EAAAA,cAAc,CAAC0B,MAAf;AACD,CAND;AAQAT,CAAC,CAACG,IAAF,CAAO,uCAAP,EAAgDC,CAAC,IAAI;AACnD,QAAMM,MAAM,GAAG,CAACC,MAAM,CAACC,gBAAR,EAA0BD,MAAM,CAACE,gBAAjC,CAAf;;AACA,OAAK,MAAMC,KAAX,IAAoBJ,MAApB,EAA4B;AAC1B,UAAM3B,cAAc,GAAGqB,CAAC,CAACnB,MAAF,CAASoB,oBAAT,EAAvB;AACA,UAAMC,UAAU,GAAGF,CAAC,CAACtB,eAAF,CAAkBC,cAAlB,CAAnB;AACAuB,IAAAA,UAAU,CAACC,aAAX,CAAyB;AAAER,MAAAA,CAAC,EAAEe,KAAL;AAAYd,MAAAA,CAAC,EAAEc,KAAf;AAAsBb,MAAAA,CAAC,EAAEa,KAAzB;AAAgCZ,MAAAA,CAAC,EAAEY;AAAnC,KAAzB;AACAR,IAAAA,UAAU,CAACE,OAAX;AACAzB,IAAAA,cAAc,CAAC0B,MAAf;AACD;AACF,CATD","sourcesContent":["export const description = `\nsetBlendColor validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\n// TODO: Move beginRenderPass to a Fixture class.\nclass F extends ValidationTest {\n  beginRenderPass(commandEncoder: GPUCommandEncoder): GPURenderPassEncoder {\n    const attachmentTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 16, height: 16, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    return commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: attachmentTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('basic use of setBlendColor', t => {\n  const commandEncoder = t.device.createCommandEncoder();\n  const renderPass = t.beginRenderPass(commandEncoder);\n  renderPass.setBlendColor({ r: 0, g: 0, b: 0, a: 0 });\n  renderPass.endPass();\n  commandEncoder.finish();\n});\n\ng.test('setBlendColor allows any number value', t => {\n  const values = [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER];\n  for (const value of values) {\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setBlendColor({ r: value, g: value, b: value, a: value });\n    renderPass.endPass();\n    commandEncoder.finish();\n  }\n});\n"],"file":"setBlendColor.spec.js"}