{"version":3,"sources":["../../../../src/suites/cts/validation/queue_submit.spec.ts"],"names":["description","TestGroup","ValidationTest","g","test","t","buffer","device","createBuffer","size","usage","GPUBufferUsage","MAP_WRITE","COPY_SRC","targetBuffer","COPY_DST","getCommandBuffer","commandEncoder","createCommandEncoder","copyBufferToBuffer","finish","queue","submit","mapWriteAsync","expectValidationError","unmap"],"mappings":";;;;AAAA,OAAO,MAAMA,WAAW,GAAI;;CAArB;AAIP,SAASC,SAAT,QAA0B,6BAA1B;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,OAAO,MAAMC,CAAC,GAAG,IAAIF,SAAJ,CAAcC,cAAd,CAAV;AAEPC,CAAC,CAACC,IAAF,CAAO,+CAAP,EAAwD,MAAMC,CAAN,IAAW;AACjE,QAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,YAAT,CAAsB;AACnCC,IAAAA,IAAI,EAAE,CAD6B;AAEnCC,IAAAA,KAAK,EAAEC,cAAc,CAACC,SAAf,GAA2BD,cAAc,CAACE;AAFd,GAAtB,CAAf;AAKA,QAAMC,YAAY,GAAGT,CAAC,CAACE,MAAF,CAASC,YAAT,CAAsB;AACzCC,IAAAA,IAAI,EAAE,CADmC;AAEzCC,IAAAA,KAAK,EAAEC,cAAc,CAACI;AAFmB,GAAtB,CAArB;;AAKA,QAAMC,gBAAgB,GAAG,MAAwB;AAC/C,UAAMC,cAAc,GAAGZ,CAAC,CAACE,MAAF,CAASW,oBAAT,EAAvB;AACAD,IAAAA,cAAc,CAACE,kBAAf,CAAkCb,MAAlC,EAA0C,CAA1C,EAA6CQ,YAA7C,EAA2D,CAA3D,EAA8D,CAA9D;AACA,WAAOG,cAAc,CAACG,MAAf,EAAP;AACD,GAJD,CAXiE,CAiBjE;;;AACAf,EAAAA,CAAC,CAACgB,KAAF,CAAQC,MAAR,CAAe,CAACN,gBAAgB,EAAjB,CAAf,EAlBiE,CAoBjE;;AACA,QAAMV,MAAM,CAACiB,aAAP,EAAN;AACAlB,EAAAA,CAAC,CAACgB,KAAF,CAAQC,MAAR,CAAe,EAAf;AAEAjB,EAAAA,CAAC,CAACmB,qBAAF,CAAwB,MAAM;AAC5BnB,IAAAA,CAAC,CAACgB,KAAF,CAAQC,MAAR,CAAe,CAACN,gBAAgB,EAAjB,CAAf;AACD,GAFD,EAxBiE,CA4BjE;;AACAV,EAAAA,MAAM,CAACmB,KAAP;AACApB,EAAAA,CAAC,CAACgB,KAAF,CAAQC,MAAR,CAAe,CAACN,gBAAgB,EAAjB,CAAf;AACD,CA/BD","sourcesContent":["export const description = `\nqueue submit validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = new TestGroup(ValidationTest);\n\ng.test('submitting with a mapped buffer is disallowed', async t => {\n  const buffer = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const targetBuffer = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_DST,\n  });\n\n  const getCommandBuffer = (): GPUCommandBuffer => {\n    const commandEncoder = t.device.createCommandEncoder();\n    commandEncoder.copyBufferToBuffer(buffer, 0, targetBuffer, 0, 4);\n    return commandEncoder.finish();\n  };\n\n  // Submitting when the buffer has never been mapped should succeed\n  t.queue.submit([getCommandBuffer()]);\n\n  // Map the buffer, submitting when the buffer is mapped should fail\n  await buffer.mapWriteAsync();\n  t.queue.submit([]);\n\n  t.expectValidationError(() => {\n    t.queue.submit([getCommandBuffer()]);\n  });\n\n  // Unmap the buffer, queue submit should succeed\n  buffer.unmap();\n  t.queue.submit([getCommandBuffer()]);\n});\n"],"file":"queue_submit.spec.js"}