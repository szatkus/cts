{"version":3,"sources":["../../../../src/suites/cts/validation/createBindGroup.spec.ts"],"names":["description","TestGroup","pcombine","poptions","ValidationTest","clone","descriptor","JSON","parse","stringify","F","getStorageBuffer","device","createBuffer","size","usage","GPUBufferUsage","STORAGE","getUniformBuffer","UNIFORM","getSampler","createSampler","getSampledTexture","createTexture","width","height","depth","format","GPUTextureUsage","SAMPLED","getStorageTexture","g","test","t","bindGroupLayout","createBindGroupLayout","bindings","binding","visibility","GPUShaderStage","COMPUTE","type","goodDescriptor","resource","buffer","layout","createBindGroup","badDescriptor","expectValidationError","bindingType","resourceType","params","getErrorBuffer","createView","Error","shouldError","FRAGMENT","mismatchedTextureUsages","COPY_SRC","COPY_DST","OUTPUT_ATTACHMENT","mismatchedTextureUsage","textureComponentType","mismatchedTextureFormats","mismatchedTextureFormat","textureDimension","arrayLayerCount","offset","_success","undefined"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroup validation tests.\n`;\n\nimport { TestGroup, pcombine, poptions } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone(descriptor: GPUTextureDescriptor): GPUTextureDescriptor {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nclass F extends ValidationTest {\n  getStorageBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 1024,\n      usage: GPUBufferUsage.STORAGE,\n    });\n  }\n\n  getUniformBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 1024,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n  }\n\n  getSampler(): GPUSampler {\n    return this.device.createSampler();\n  }\n\n  getSampledTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n    });\n  }\n\n  getStorageTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE,\n    });\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('binding count mismatch', async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type: 'storage-buffer',\n      },\n    ],\n  });\n\n  const goodDescriptor: GPUBindGroupDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        resource: {\n          buffer: t.getStorageBuffer(),\n        },\n      },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Another binding is not expected.\n  const badDescriptor: GPUBindGroupDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        resource: {\n          buffer: t.getStorageBuffer(),\n        },\n      },\n      // Another binding is added.\n      {\n        binding: 1,\n        resource: {\n          buffer: t.getStorageBuffer(),\n        },\n      },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('binding must be present in layout', async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type: 'storage-buffer',\n      },\n    ],\n  });\n\n  const goodDescriptor: GPUBindGroupDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        resource: {\n          buffer: t.getStorageBuffer(),\n        },\n      },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Binding index 0 must be present.\n  const badDescriptor: GPUBindGroupDescriptor = {\n    bindings: [\n      {\n        binding: 1, // binding index becomes 1.\n        resource: {\n          buffer: t.getStorageBuffer(),\n        },\n      },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('buffer binding must contain exactly one buffer of its type', async t => {\n  const { bindingType, resourceType } = t.params;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type: bindingType,\n      },\n    ],\n  });\n\n  let resource: GPUBindingResource;\n  if (resourceType === 'error') {\n    resource = { buffer: await t.getErrorBuffer() };\n  } else if (resourceType === 'uniform-buffer') {\n    resource = { buffer: t.getUniformBuffer() };\n  } else if (resourceType === 'storage-buffer') {\n    resource = { buffer: t.getStorageBuffer() };\n  } else if (resourceType === 'sampler') {\n    resource = t.getSampler();\n  } else if (resourceType === 'sampled-texture') {\n    resource = t.getSampledTexture().createView();\n  } else if (resourceType === 'storage-texture') {\n    resource = t.getStorageTexture().createView();\n  } else throw new Error();\n\n  let shouldError = bindingType !== resourceType;\n  if (bindingType === 'readonly-storage-buffer' && resourceType === 'storage-buffer') {\n    shouldError = false;\n  }\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup({\n      bindings: [{ binding: 0, resource }],\n      layout: bindGroupLayout,\n    });\n  }, shouldError);\n}).params(\n  pcombine(\n    poptions('bindingType', [\n      'uniform-buffer',\n      'storage-buffer',\n      'readonly-storage-buffer',\n      'sampler',\n      'sampled-texture',\n      'storage-texture',\n    ]),\n    poptions('resourceType', [\n      'error',\n      'uniform-buffer',\n      'storage-buffer',\n      'sampler',\n      'sampled-texture',\n      'storage-texture',\n    ])\n  )\n);\n\ng.test('texture binding must have correct usage', async t => {\n  const { type } = t.params;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type,\n      },\n    ],\n  });\n\n  let usage: GPUTextureUsage;\n  if (type === 'sampled-texture') {\n    usage = GPUTextureUsage.SAMPLED;\n  } else if (type === 'storage-texture') {\n    usage = GPUTextureUsage.STORAGE;\n  } else {\n    throw new Error('Unexpected binding type');\n  }\n\n  const goodDescriptor: GPUTextureDescriptor = {\n    size: { width: 16, height: 16, depth: 1 },\n    format: 'r8unorm',\n    usage,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    bindings: [\n      {\n        binding: 0,\n        resource: t.device.createTexture(goodDescriptor).createView(),\n      },\n    ],\n    layout: bindGroupLayout,\n  });\n\n  function* mismatchedTextureUsages(): Iterable<GPUTextureUsage> {\n    yield GPUTextureUsage.COPY_SRC;\n    yield GPUTextureUsage.COPY_DST;\n    if (type !== 'sampled-texture') {\n      yield GPUTextureUsage.SAMPLED;\n    }\n    if (type !== 'storage-texture') {\n      yield GPUTextureUsage.STORAGE;\n    }\n    yield GPUTextureUsage.OUTPUT_ATTACHMENT;\n  }\n\n  // Mismatched texture binding usages are not valid.\n  for (const mismatchedTextureUsage of mismatchedTextureUsages()) {\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.usage = mismatchedTextureUsage;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        bindings: [\n          {\n            binding: 0,\n            resource: t.device.createTexture(badDescriptor).createView(),\n          },\n        ],\n        layout: bindGroupLayout,\n      });\n    });\n  }\n}).params(poptions('type', ['sampled-texture', 'storage-texture']));\n\ng.test('texture must have correct component type', async t => {\n  const { textureComponentType } = t.params;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: 'sampled-texture',\n        textureComponentType,\n      },\n    ],\n  });\n\n  // TODO: Test more texture component types.\n  let format: GPUTextureFormat;\n  if (textureComponentType === 'float') {\n    format = 'r8unorm';\n  } else if (textureComponentType === 'sint') {\n    format = 'r8sint';\n  } else if (textureComponentType === 'uint') {\n    format = 'r8uint';\n  } else {\n    throw new Error('Unexpected texture component type');\n  }\n\n  const goodDescriptor: GPUTextureDescriptor = {\n    size: { width: 16, height: 16, depth: 1 },\n    format,\n    usage: GPUTextureUsage.SAMPLED,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    bindings: [\n      {\n        binding: 0,\n        resource: t.device.createTexture(goodDescriptor).createView(),\n      },\n    ],\n    layout: bindGroupLayout,\n  });\n\n  function* mismatchedTextureFormats(): Iterable<GPUTextureFormat> {\n    if (textureComponentType !== 'float') {\n      yield 'r8unorm';\n    }\n    if (textureComponentType !== 'sint') {\n      yield 'r8sint';\n    }\n    if (textureComponentType !== 'uint') {\n      yield 'r8uint';\n    }\n  }\n\n  // Mismatched texture binding formats are not valid.\n  for (const mismatchedTextureFormat of mismatchedTextureFormats()) {\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.format = mismatchedTextureFormat;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        bindings: [\n          {\n            binding: 0,\n            resource: t.device.createTexture(badDescriptor).createView(),\n          },\n        ],\n        layout: bindGroupLayout,\n      });\n    });\n  }\n}).params(poptions('textureComponentType', ['float', 'sint', 'uint']));\n\n// TODO: Write test for all dimensions.\ng.test('texture must have correct dimension', async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: 'sampled-texture',\n        textureDimension: '2d',\n      },\n    ],\n  });\n\n  const goodDescriptor: GPUTextureDescriptor = {\n    size: { width: 16, height: 16, depth: 1 },\n    arrayLayerCount: 1,\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.SAMPLED,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    bindings: [\n      {\n        binding: 0,\n        resource: t.device.createTexture(goodDescriptor).createView(),\n      },\n    ],\n    layout: bindGroupLayout,\n  });\n\n  // Mismatched texture binding formats are not valid.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.arrayLayerCount = 2;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup({\n      bindings: [\n        {\n          binding: 0,\n          resource: t.device.createTexture(badDescriptor).createView(),\n        },\n      ],\n      layout: bindGroupLayout,\n    });\n  });\n});\n\ng.test('buffer offset and size for bind groups match', async t => {\n  const { offset, size, _success } = t.params;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type: 'storage-buffer',\n      },\n    ],\n  });\n\n  const buffer = t.device.createBuffer({\n    size: 1024,\n    usage: GPUBufferUsage.STORAGE,\n  });\n\n  const descriptor: GPUBindGroupDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        resource: { buffer, offset, size },\n      },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  if (_success) {\n    // Control case\n    t.device.createBindGroup(descriptor);\n  } else {\n    // Buffer offset and/or size don't match in bind groups.\n    t.expectValidationError(() => {\n      t.device.createBindGroup(descriptor);\n    });\n  }\n}).params([\n  { offset: 0, size: 512, _success: true }, // offset 0 is valid\n  { offset: 256, size: 256, _success: true }, // offset 256 (aligned) is valid\n\n  // unaligned buffer offset is invalid\n  { offset: 1, size: 256, _success: false },\n  { offset: 1, size: undefined, _success: false },\n  { offset: 128, size: 256, _success: false },\n  { offset: 255, size: 256, _success: false },\n\n  { offset: 0, size: 256, _success: true }, // touching the start of the buffer works\n  { offset: 256 * 3, size: 256, _success: true }, // touching the end of the buffer works\n  { offset: 1024, size: 0, _success: true }, // touching the end of the buffer works\n  { offset: 0, size: 1024, _success: true }, // touching the full buffer works\n  { offset: 0, size: undefined, _success: true }, // touching the full buffer works\n  { offset: 256 * 5, size: 0, _success: false }, // offset is OOB\n  { offset: 0, size: 256 * 5, _success: false }, // size is OOB\n  { offset: 1024, size: 1, _success: false }, // offset+size is OOB\n  { offset: 256, size: -256, _success: false }, // offset+size overflows to be 0\n]);\n"],"file":"createBindGroup.spec.js"}