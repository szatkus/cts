{"version":3,"sources":["../../../../src/suites/cts/validation/createBindGroupLayout.spec.ts"],"names":["description","TestGroup","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","t","goodDescriptor","bindings","binding","visibility","GPUShaderStage","COMPUTE","type","device","createBindGroupLayout","badDescriptor","expectValidationError","maxDynamicBufferCount","params","maxDynamicBufferBindings","i","push","hasDynamicOffset","length","_success","FRAGMENT"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone(descriptor: GPUBindGroupLayoutDescriptor): GPUBindGroupLayoutDescriptor {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = new TestGroup(ValidationTest);\n\ng.test('some binding index was specified more than once', async t => {\n  const goodDescriptor: GPUBindGroupLayoutDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type: 'storage-buffer',\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.COMPUTE,\n        type: 'storage-buffer',\n      },\n    ],\n  };\n\n  // Control case\n  t.device.createBindGroupLayout(goodDescriptor);\n\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.bindings![1].binding = 0;\n\n  // Binding index 0 can't be specified twice.\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout(badDescriptor);\n  });\n});\n\ng.test('negative binding index', async t => {\n  const goodDescriptor: GPUBindGroupLayoutDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        type: 'storage-buffer',\n      },\n    ],\n  };\n\n  // Control case\n  t.device.createBindGroupLayout(goodDescriptor);\n\n  // Negative binding index can't be specified.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.bindings![0].binding = -1;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout(badDescriptor);\n  });\n});\n\ng.test('Visibility of bindings can be 0', async t => {\n  const descriptor: GPUBindGroupLayoutDescriptor = {\n    bindings: [\n      {\n        binding: 0,\n        visibility: 0,\n        type: 'storage-buffer',\n      },\n    ],\n  };\n\n  t.device.createBindGroupLayout(descriptor);\n});\n\ng.test('number of dynamic buffers exceeds the maximum value', async t => {\n  const { type, maxDynamicBufferCount } = t.params;\n\n  const maxDynamicBufferBindings: GPUBindGroupLayoutBinding[] = [];\n  for (let i = 0; i < maxDynamicBufferCount; i++) {\n    maxDynamicBufferBindings.push({\n      binding: i,\n      visibility: GPUShaderStage.COMPUTE,\n      type,\n      hasDynamicOffset: true,\n    });\n  }\n\n  const goodDescriptor: GPUBindGroupLayoutDescriptor = {\n    bindings: [\n      ...maxDynamicBufferBindings,\n      {\n        binding: maxDynamicBufferBindings.length,\n        visibility: GPUShaderStage.COMPUTE,\n        type,\n        hasDynamicOffset: false,\n      },\n    ],\n  };\n\n  // Control case\n  t.device.createBindGroupLayout(goodDescriptor);\n\n  // Dynamic buffers exceed maximum in a bind group layout.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.bindings![maxDynamicBufferCount].hasDynamicOffset = true;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout(badDescriptor);\n  });\n}).params([\n  { type: 'storage-buffer', maxDynamicBufferCount: 4 },\n  { type: 'uniform-buffer', maxDynamicBufferCount: 8 },\n]);\n\ng.test('dynamic set to true is allowed only for buffers', async t => {\n  const { type, _success } = t.params;\n\n  const descriptor = {\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type,\n        hasDynamicOffset: true,\n      },\n    ],\n  };\n\n  if (_success) {\n    // Control case\n    t.device.createBindGroupLayout(descriptor);\n  } else {\n    // Dynamic set to true is not allowed in some cases.\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(descriptor);\n    });\n  }\n}).params([\n  { type: 'uniform-buffer', _success: true },\n  { type: 'storage-buffer', _success: true },\n  { type: 'readonly-storage-buffer', _success: true },\n  { type: 'sampler', _success: false },\n  { type: 'sampled-texture', _success: false },\n  { type: 'storage-texture', _success: false },\n]);\n"],"file":"createBindGroupLayout.spec.js"}