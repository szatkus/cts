{"version":3,"sources":["../../../../src/suites/cts/validation/render_pass_descriptor.spec.ts"],"names":["description","TestGroup","ValidationTest","F","createTexture","options","format","width","height","arrayLayerCount","mipLevelCount","sampleCount","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","device","size","depth","getColorAttachment","texture","textureViewDescriptor","attachment","createView","loadValue","r","g","b","a","getDepthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","tryRenderPass","success","descriptor","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","endPass","expectValidationError","finish","test","t","colorTexture","colorAttachments","depthStencilTexture","depthStencilAttachment","colorAttachmentsCount","_success","params","i","push","colorTexture1x1A","colorTexture1x1B","colorTexture2x2","depthStencilTexture1x1","depthStencilTexture2x2","baseArrayLayer","ARRAY_LAYER_COUNT","MIP_LEVEL_COUNT","COLOR_FORMAT","DEPTH_STENCIL_FORMAT","baseTextureViewDescriptor","dimension","baseMipLevel","resolveTargetTexture","resolveTarget","multisampledColorTexture","multisampledResolveTargetTexture","colorAttachment","COPY_SRC","COPY_DST","resolveTargetTextureView","multisampledDepthStencilTexture"],"mappings":"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","sourcesContent":["export const description = `\nrender pass descriptor validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  createTexture(\n    options: {\n      format?: GPUTextureFormat;\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      usage?: GPUTextureUsage;\n    } = {}\n  ): GPUTexture {\n    const {\n      format = 'rgba8unorm',\n      width = 16,\n      height = 16,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      usage = GPUTextureUsage.OUTPUT_ATTACHMENT,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: 1 },\n      format,\n      arrayLayerCount,\n      mipLevelCount,\n      sampleCount,\n      usage,\n    });\n  }\n\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachmentDescriptor {\n    const attachment = texture.createView(textureViewDescriptor);\n\n    return {\n      attachment,\n      loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n    };\n  }\n\n  getDepthStencilAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassDepthStencilAttachmentDescriptor {\n    const attachment = texture.createView(textureViewDescriptor);\n\n    return {\n      attachment,\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    };\n  }\n\n  async tryRenderPass(success: boolean, descriptor: GPURenderPassDescriptor): Promise<void> {\n    const commandEncoder = this.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass(descriptor);\n    renderPass.endPass();\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('a render pass with only one color is ok', t => {\n  const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n  const descriptor = {\n    colorAttachments: [t.getColorAttachment(colorTexture)],\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('a render pass with only one depth attachment is ok', t => {\n  const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n  const descriptor = {\n    colorAttachments: [],\n    depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('OOB color attachment indices are handled', async t => {\n  const { colorAttachmentsCount, _success } = t.params;\n\n  const colorAttachments = [];\n  for (let i = 0; i < colorAttachmentsCount; i++) {\n    const colorTexture = t.createTexture();\n    colorAttachments.push(t.getColorAttachment(colorTexture));\n  }\n\n  await t.tryRenderPass(_success, { colorAttachments });\n}).params([\n  { colorAttachmentsCount: 4, _success: true }, // Control case\n  { colorAttachmentsCount: 5, _success: false }, // Out of bounds\n]);\n\ng.test('attachments must have the same size', async t => {\n  const colorTexture1x1A = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n  const colorTexture1x1B = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n  const colorTexture2x2 = t.createTexture({ width: 2, height: 2, format: 'rgba8unorm' });\n  const depthStencilTexture1x1 = t.createTexture({\n    width: 1,\n    height: 1,\n    format: 'depth24plus-stencil8',\n  });\n  const depthStencilTexture2x2 = t.createTexture({\n    width: 2,\n    height: 2,\n    format: 'depth24plus-stencil8',\n  });\n\n  {\n    // Control case: all the same size (1x1)\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture1x1A),\n        t.getColorAttachment(colorTexture1x1B),\n      ],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture1x1),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // One of the color attachments has a different size\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture1x1A),\n        t.getColorAttachment(colorTexture2x2),\n      ],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    // The depth stencil attachment has a different size\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture1x1A),\n        t.getColorAttachment(colorTexture1x1B),\n      ],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture2x2),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('attachments must match whether they are used for color or depth stencil', async t => {\n  const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n  const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n\n  {\n    // Using depth-stencil for color\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(depthStencilTexture)],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    // Using color for depth-stencil\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(colorTexture),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('check layer count for color or depth stencil', async t => {\n  const { arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n  const ARRAY_LAYER_COUNT = 10;\n  const MIP_LEVEL_COUNT = 1;\n  const COLOR_FORMAT = 'rgba8unorm';\n  const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n  const colorTexture = t.createTexture({\n    format: COLOR_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT,\n  });\n  const depthStencilTexture = t.createTexture({\n    format: DEPTH_STENCIL_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT,\n  });\n\n  const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n    dimension: '2d-array',\n    baseArrayLayer,\n    arrayLayerCount,\n    baseMipLevel: 0,\n    mipLevelCount: MIP_LEVEL_COUNT,\n  };\n\n  {\n    // Check 2D array texture view for color\n    const textureViewDescriptor: GPUTextureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: COLOR_FORMAT,\n    };\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n    };\n\n    await t.tryRenderPass(_success, descriptor);\n  }\n  {\n    // Check 2D array texture view for depth stencil\n    const textureViewDescriptor: GPUTextureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: DEPTH_STENCIL_FORMAT,\n    };\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(\n        depthStencilTexture,\n        textureViewDescriptor\n      ),\n    };\n\n    await t.tryRenderPass(_success, descriptor);\n  }\n}).params([\n  { arrayLayerCount: 5, baseArrayLayer: 0, _success: false }, // using 2D array texture view with arrayLayerCount > 1 is not allowed\n  { arrayLayerCount: 1, baseArrayLayer: 0, _success: true }, // using 2D array texture view that covers the first layer of the texture is OK\n  { arrayLayerCount: 1, baseArrayLayer: 9, _success: true }, // using 2D array texture view that covers the last layer is OK for depth stencil\n]);\n\ng.test('check mip level count for color or depth stencil', async t => {\n  const { mipLevelCount, baseMipLevel, _success } = t.params;\n\n  const ARRAY_LAYER_COUNT = 1;\n  const MIP_LEVEL_COUNT = 4;\n  const COLOR_FORMAT = 'rgba8unorm';\n  const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n  const colorTexture = t.createTexture({\n    format: COLOR_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT,\n  });\n  const depthStencilTexture = t.createTexture({\n    format: DEPTH_STENCIL_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT,\n  });\n\n  const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n    dimension: '2d',\n    baseArrayLayer: 0,\n    arrayLayerCount: ARRAY_LAYER_COUNT,\n    baseMipLevel,\n    mipLevelCount,\n  };\n\n  {\n    // Check 2D texture view for color\n    const textureViewDescriptor: GPUTextureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: COLOR_FORMAT,\n    };\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n    };\n\n    await t.tryRenderPass(_success, descriptor);\n  }\n  {\n    // Check 2D texture view for depth stencil\n    const textureViewDescriptor: GPUTextureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: DEPTH_STENCIL_FORMAT,\n    };\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(\n        depthStencilTexture,\n        textureViewDescriptor\n      ),\n    };\n\n    await t.tryRenderPass(_success, descriptor);\n  }\n}).params([\n  { mipLevelCount: 2, baseMipLevel: 0, _success: false }, // using 2D texture view with mipLevelCount > 1 is not allowed\n  { mipLevelCount: 1, baseMipLevel: 0, _success: true }, // using 2D texture view that covers the first level of the texture is OK\n  { mipLevelCount: 1, baseMipLevel: 3, _success: true }, // using 2D texture view that covers the last level of the texture is OK\n]);\n\ng.test('it is invalid to set resolve target if color attachment is non multisampled', async t => {\n  const colorTexture = t.createTexture({ sampleCount: 1 });\n  const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        attachment: colorTexture.createView(),\n        resolveTarget: resolveTargetTexture.createView(),\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('check the use of multisampled textures as color attachments', async t => {\n  const colorTexture = t.createTexture({ sampleCount: 1 });\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n\n  {\n    // It is allowed to use a multisampled color attachment without setting resolve target\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n    };\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // It is not allowed to use multiple color attachments with different sample counts\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture),\n        t.getColorAttachment(multisampledColorTexture),\n      ],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('it is invalid to use a multisampled resolve target', async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const multisampledResolveTargetTexture = t.createTexture({ sampleCount: 4 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = multisampledResolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('it is invalid to use a resolve target with array layer count greater than 1', async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({ arrayLayerCount: 2 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('it is invalid to use a resolve target with mipmap level count greater than 1', async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({ mipLevelCount: 2 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('it is invalid to use a resolve target whose usage is not output attachment', async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('it is invalid to use a resolve target in error state', async t => {\n  const ARRAY_LAYER_COUNT = 1;\n\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  t.expectValidationError(() => {\n    colorAttachment.resolveTarget = resolveTargetTexture.createView({\n      dimension: '2d',\n      format: 'rgba8unorm',\n      baseArrayLayer: ARRAY_LAYER_COUNT + 1,\n    });\n  });\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('use of multisampled attachment and non multisampled resolve target is allowed', async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('use a resolve target in a format different than the attachment is not allowed', async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({ format: 'bgra8unorm' });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('size of the resolve target must be the same as the color attachment', async t => {\n  const size = 16;\n  const multisampledColorTexture = t.createTexture({ width: size, height: size, sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({\n    width: size * 2,\n    height: size * 2,\n    mipLevelCount: 2,\n  });\n\n  {\n    const resolveTargetTextureView = resolveTargetTexture.createView({\n      baseMipLevel: 0,\n      mipLevelCount: 1,\n    });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTextureView;\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    const resolveTargetTextureView = resolveTargetTexture.createView({ baseMipLevel: 1 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTextureView;\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n});\n\ng.test('check depth stencil attachment sample counts mismatch', async t => {\n  const multisampledDepthStencilTexture = t.createTexture({\n    sampleCount: 4,\n    format: 'depth24plus-stencil8',\n  });\n\n  {\n    // It is not allowed to use a depth stencil attachment whose sample count is different from the\n    // one of the color attachment\n    const depthStencilTexture = t.createTexture({\n      sampleCount: 1,\n      format: 'depth24plus-stencil8',\n    });\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    const colorTexture = t.createTexture({ sampleCount: 1 });\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    // It is allowed to use a multisampled depth stencil attachment whose sample count is equal to\n    // the one of the color attachment.\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // It is allowed to use a multisampled depth stencil attachment with no color attachment\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n});\n"],"file":"render_pass_descriptor.spec.js"}