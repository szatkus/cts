{"version":3,"sources":["../../../src/framework/params/filter.ts"],"names":["pfilter","cases","pred","PFilter","Symbol","iterator","constructor","p"],"mappings":";;;;;;;;AAIA,OAAO,SAASA,OAAT,CAAiBC,KAAjB,EAA2CC,IAA3C,EAAqE;AAC1E,SAAO,IAAIC,OAAJ,CAAYF,KAAZ,EAAmBC,IAAnB,CAAP;AACD;mBAWGE,MAAM,CAACC,Q;;AATX,MAAMF,OAAN,CAA2C;AAIzCG,EAAAA,WAAW,CAACL,KAAD,EAA2BC,IAA3B,EAA4C;AAAA;;AAAA;;AACrD,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAED,wBAAwC;AACtC,SAAK,MAAMK,CAAX,IAAgB,KAAKN,KAArB,EAA4B;AAC1B,UAAI,KAAKC,IAAL,CAAUK,CAAV,CAAJ,EAAkB;AAChB,cAAMA,CAAN;AACD;AACF;AACF;;AAfwC","sourcesContent":["import { ParamSpec, ParamSpecIterable, ParamSpecIterator } from './index.js';\n\ntype Predicate = (o: ParamSpec) => boolean;\n\nexport function pfilter(cases: ParamSpecIterable, pred: Predicate): PFilter {\n  return new PFilter(cases, pred);\n}\n\nclass PFilter implements ParamSpecIterable {\n  private cases: ParamSpecIterable;\n  private pred: Predicate;\n\n  constructor(cases: ParamSpecIterable, pred: Predicate) {\n    this.cases = cases;\n    this.pred = pred;\n  }\n\n  *[Symbol.iterator](): ParamSpecIterator {\n    for (const p of this.cases) {\n      if (this.pred(p)) {\n        yield p;\n      }\n    }\n  }\n}\n"],"file":"filter.js"}