{"version":3,"sources":["../../src/framework/url_query.ts"],"names":["encodeSelectively","s","ret","encodeURIComponent","replace","extractPublicParams","params","publicParams","k","Object","keys","startsWith","checkPublicParamType","v","undefined","Array","x","Error","makeQueryString","spec","testcase","suite","path","test","JSON","stringify"],"mappings":";;;;AAGA,OAAO,SAASA,iBAAT,CAA2BC,CAA3B,EAA8C;AACnD,MAAIC,GAAG,GAAGC,kBAAkB,CAACF,CAAD,CAA5B;AACAC,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACA,SAAOF,GAAP;AACD;AAED,OAAO,SAASG,mBAAT,CAA6BC,MAA7B,EAA2D;AAChE,QAAMC,YAAuB,GAAG,EAAhC;;AACA,OAAK,MAAMC,CAAX,IAAgBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB,EAAqC;AACnC,QAAI,CAACE,CAAC,CAACG,UAAF,CAAa,GAAb,CAAL,EAAwB;AACtBJ,MAAAA,YAAY,CAACC,CAAD,CAAZ,GAAkBF,MAAM,CAACE,CAAD,CAAxB;AACD;AACF;;AACD,SAAOD,YAAP;AACD;AAED,OAAO,SAASK,oBAAT,CAA8BC,CAA9B,EAAsD;AAC3D,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,QAAtC,IAAkD,OAAOA,CAAP,KAAa,SAA/D,IAA4EA,CAAC,KAAKC,SAAtF,EAAiG;AAC/F;AACD;;AACD,MAAID,CAAC,YAAYE,KAAjB,EAAwB;AACtB,SAAK,MAAMC,CAAX,IAAgBH,CAAhB,EAAmB;AACjB,UAAI,OAAOG,CAAP,KAAa,QAAjB,EAA2B;AACzB;AACD;AACF;;AACD;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,uCAAuCJ,CAAjD,CAAN;AACD;AAED,OAAO,SAASK,eAAT,CAAyBC,IAAzB,EAA2CC,QAA3C,EAA0E;AAC/E,MAAInB,CAAC,GAAGkB,IAAI,CAACE,KAAL,GAAa,GAArB;AACApB,EAAAA,CAAC,IAAIkB,IAAI,CAACG,IAAL,GAAY,GAAjB;;AACA,MAAIF,QAAQ,KAAKN,SAAjB,EAA4B;AAC1Bb,IAAAA,CAAC,IAAImB,QAAQ,CAACG,IAAT,GAAgB,GAArB;;AACA,QAAIH,QAAQ,CAACd,MAAb,EAAqB;AACnBL,MAAAA,CAAC,IAAIuB,IAAI,CAACC,SAAL,CAAepB,mBAAmB,CAACe,QAAQ,CAACd,MAAV,CAAlC,CAAL;AACD;AACF;;AACD,SAAON,iBAAiB,CAACC,CAAD,CAAxB;AACD","sourcesContent":["import { TestCaseID, TestSpecID } from './id.js';\nimport { ParamArgument, ParamSpec } from './params/index.js';\n\nexport function encodeSelectively(s: string): string {\n  let ret = encodeURIComponent(s);\n  ret = ret.replace(/%22/g, '\"');\n  ret = ret.replace(/%2C/g, ',');\n  ret = ret.replace(/%2F/g, '/');\n  ret = ret.replace(/%3A/g, ':');\n  ret = ret.replace(/%3D/g, '=');\n  ret = ret.replace(/%5B/g, '[');\n  ret = ret.replace(/%5D/g, ']');\n  ret = ret.replace(/%7B/g, '{');\n  ret = ret.replace(/%7D/g, '}');\n  return ret;\n}\n\nexport function extractPublicParams(params: ParamSpec): ParamSpec {\n  const publicParams: ParamSpec = {};\n  for (const k of Object.keys(params)) {\n    if (!k.startsWith('_')) {\n      publicParams[k] = params[k];\n    }\n  }\n  return publicParams;\n}\n\nexport function checkPublicParamType(v: ParamArgument): void {\n  if (typeof v === 'number' || typeof v === 'string' || typeof v === 'boolean' || v === undefined) {\n    return;\n  }\n  if (v instanceof Array) {\n    for (const x of v) {\n      if (typeof x !== 'number') {\n        break;\n      }\n    }\n    return;\n  }\n  throw new Error('Invalid type for test case params ' + v);\n}\n\nexport function makeQueryString(spec: TestSpecID, testcase?: TestCaseID): string {\n  let s = spec.suite + ':';\n  s += spec.path + ':';\n  if (testcase !== undefined) {\n    s += testcase.test + '=';\n    if (testcase.params) {\n      s += JSON.stringify(extractPublicParams(testcase.params));\n    }\n  }\n  return encodeSelectively(s);\n}\n"],"file":"url_query.js"}